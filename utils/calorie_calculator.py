# -*- coding: utf-8 -*-
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ª–æ—Ä–∏–π
"""
import re
import logging
from typing import Optional, Dict, Any

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–∑ main.py
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

from data.calorie_database import CALORIE_DATABASE, LOW_CAL_KEYWORDS, HIGH_CAL_KEYWORDS
from config import VALIDATION_LIMITS, ACTIVITY_MULTIPLIER, GOAL_MULTIPLIERS, OPENAI_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI API –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ (1.0+)
try:
    from openai import AsyncOpenAI
    client = AsyncOpenAI(api_key=OPENAI_API_KEY)
    OPENAI_AVAILABLE = True
    logging.info("OpenAI client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)")
except ImportError:
    OPENAI_AVAILABLE = False
    client = None
    logging.warning("OpenAI library not available. GPT features will be disabled.")


def calculate_bmr_tdee(weight: float, height: float, age: int, sex: str, goal: str = 'deficit') -> Dict[str, Any]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç BMR, TDEE –∏ —Ü–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
    """
    # –§–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞ ‚Äî –°–∞–Ω –ñ–µ–æ—Ä–∞
    if sex == '–º—É–∂':
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:  # –∂–µ–Ω
        bmr = 10 * weight + 6.25 * height - 5 * age - 161
    
    # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    tdee = int(bmr * ACTIVITY_MULTIPLIER)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
    target = int(tdee * GOAL_MULTIPLIERS.get(goal, 1.0))
    
    return {
        'bmr': int(bmr),
        'tdee': tdee,
        'target': target,
        'goal': goal
    }


def create_calorie_prompt(description: str, is_clarification: bool = False) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π"""
    base_prompt = f"""
–†–∞—Å—Å—á–∏—Ç–∞–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –±–ª—é–¥–∞: "{description}"

–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
{CALORIE_DATABASE}

–ü–†–ê–í–ò–õ–ê –†–ê–°–ß–ï–¢–ê:
1. –û—Ü–µ–Ω–∏–≤–∞–π —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ü–∏–∏: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–∞—Ä–µ–ª–∫–∞ ~200-300–≥, —Å—Ç–æ–ª–æ–≤–∞—è –ª–æ–∂–∫–∞ ~15–≥, —á–∞–π–Ω–∞—è ~5–≥
2. –£—á–∏—Ç—ã–≤–∞–π —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: –∂–∞—Ä–µ–Ω–æ–µ +20-30% –∫–∞–ª–æ—Ä–∏–π, –≤–∞—Ä–µ–Ω–æ–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
3. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –≤–µ—Å, –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ü–∏–∏ –≤–∑—Ä–æ—Å–ª–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
4. –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞–∑–º–µ—Ä–µ –ø–æ—Ä—Ü–∏–∏, –±–µ—Ä–∏ —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è

"""
    
    if is_clarification:
        base_prompt += "–í–ê–ñ–ù–û: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞. –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û —á–∏—Å–ª–æ–º –∫–∞–ª–æ—Ä–∏–π –±–µ–∑ –¥—Ä–æ–±–µ–π."
    else:
        base_prompt += """
–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ - –æ—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û —á–∏—Å–ª–æ–º –∫–∞–ª–æ—Ä–∏–π –±–µ–∑ –¥—Ä–æ–±–µ–π.
–ï—Å–ª–∏ –Ω—É–∂–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è (—Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏, —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è), –∑–∞–¥–∞–π –û–î–ò–ù –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏ –¥–æ–±–∞–≤—å "–í–û–ü–†–û–°:".
"""
    
    return base_prompt


def validate_calorie_result(description: str, kcal: int) -> int:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π"""
    description_lower = description.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    min_cal = VALIDATION_LIMITS['calories']['min']
    max_cal = VALIDATION_LIMITS['calories']['max']
    
    if kcal < min_cal:
        logging.warning(f"Very low calories ({kcal}) for '{description}' - adjusting to {min_cal}")
        return min_cal
    
    if kcal > max_cal:
        logging.warning(f"Very high calories ({kcal}) for '{description}' - might be incorrect")
        # –î–ª—è –æ—á–µ–Ω—å –∫–∞–ª–æ—Ä–∏–π–Ω—ã—Ö –±–ª—é–¥ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º
    
    # –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    has_low_cal = any(word in description_lower for word in LOW_CAL_KEYWORDS)
    has_high_cal = any(word in description_lower for word in HIGH_CAL_KEYWORDS)
    
    if has_low_cal and kcal > 500:
        adjusted = min(kcal, 300)
        logging.info(f"Adjusting high calories for low-cal food: {description} ({kcal} -> {adjusted})")
        return adjusted
    
    if has_high_cal and kcal < 200:
        adjusted = max(kcal, 250)
        logging.info(f"Adjusting low calories for high-cal food: {description} ({kcal} -> {adjusted})")
        return adjusted
    
    return kcal


def extract_calories_smart(response_text: str) -> Optional[int]:
    """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ GPT"""
    response_text = response_text.strip()
    logging.info(f"Extracting calories from: {response_text}")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
    if response_text.replace('.', '').replace(',', '').isdigit():
        return int(float(response_text.replace(',', '.')))
    
    # –ò—â–µ–º —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    patterns = [
        r'–∏—Ç–æ–≥–æ:?\s*(\d+)',
        r'–≤—Å–µ–≥–æ:?\s*(\d+)', 
        r'–æ–±—â–∞—è\s+–∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:?\s*(\d+)', 
        r'–∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:?\s*(\d+)', 
        r'(\d+)\s*–∫–∫–∞–ª',
        r'=\s*(\d+)',
        r'—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç?\s*(\d+)',
        r'–ø—Ä–∏–º–µ—Ä–Ω–æ\s*(\d+)',
        r'–æ–∫–æ–ª–æ\s*(\d+)'
    ]
    
    for pattern in patterns:
        matches = re.findall(pattern, response_text, re.IGNORECASE)
        if matches:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–±—ã—á–Ω–æ –∏—Ç–æ–≥–æ–≤–æ–µ)
            result = int(matches[-1])
            logging.info(f"Found calories using pattern '{pattern}': {result}")
            return result
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö, –±–µ—Ä–µ–º –≤—Å–µ —á–∏—Å–ª–∞
    numbers = [int(x) for x in re.findall(r'\d+', response_text) if int(x) > 10]
    if numbers:
        # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ –∏—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        result = max(numbers) if len(numbers) == 1 else numbers[-1]
        logging.info(f"Using fallback number extraction: {result}")
        return result
    
    logging.warning(f"Could not extract calories from: {response_text}")
    return None


async def ask_gpt(messages: list) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI GPT"""
    if not OPENAI_AVAILABLE:
        raise Exception("OpenAI library not available")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—è OpenAI API (1.0+)
        if 'client' not in globals() or client is None:
            raise Exception("OpenAI client not initialized")
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å: –∏—Å–ø–æ–ª—å–∑—É–µ–º gpt-4o –¥–ª—è vision –∑–∞–¥–∞—á, gpt-4o-mini –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        has_image = any(
            isinstance(msg.get('content'), list) and 
            any(item.get('type') == 'image_url' for item in msg.get('content', []))
            for msg in messages
        )
        model = "gpt-4o" if has_image else "gpt-4o-mini"
        
        response = await client.chat.completions.create(
            model=model,
            messages=messages,
            max_tokens=500,
            temperature=0.1
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"OpenAI API error: {e}")
        raise


def get_calories_left_message(profile: Dict[str, Any], diary: Dict[str, int], 
                             burned: Dict[str, int], today: str) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–∞–ª–æ—Ä–∏–π
    """
    target_calories = profile.get('target_calories')
    old_target_limit = profile.get('target_limit')  # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
    goal = profile.get('goal', 'deficit')
    
    eaten_today = diary.get(today, 0)
    burned_today = burned.get(today, 0)
    
    if target_calories:
        # –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å—á—ë—Ç–æ–º
        left = target_calories - eaten_today
        
        goal_names = {
            'deficit': '–¥–æ —Ü–µ–ª–∏ –ø–æ—Ö—É–¥–µ–Ω–∏—è',
            'maintain': '–¥–æ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞',
            'surplus': '–¥–æ —Ü–µ–ª–∏ –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã'
        }
        goal_name = goal_names.get(goal, '–¥–æ —Ü–µ–ª–∏')
        
        if left > 0:
            left_message = f"–û—Å—Ç–∞–ª–æ—Å—å {goal_name}: {left} –∫–∫–∞–ª"
            if burned_today > 0:
                left_message += f" (+ {burned_today} –∫–∫–∞–ª –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)"
        else:
            left_message = f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ {goal_name.replace('–¥–æ ', '')}: {abs(left)} –∫–∫–∞–ª"
            
    elif old_target_limit:
        # –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å —Ä—É—á–Ω—ã–º –ª–∏–º–∏—Ç–æ–º (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        net_calories = eaten_today - burned_today
        left = old_target_limit - net_calories
        left_message = f"–û—Å—Ç–∞–ª–æ—Å—å –¥–æ –ª–∏–º–∏—Ç–∞: {max(left, 0)} –∫–∫–∞–ª"
        if left < 0:
            left_message += f" (–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –Ω–∞ {abs(left)} –∫–∫–∞–ª)"
    else:
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
        norm = profile.get('norm', 0)
        
        if not norm:
            # –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            return f"üìù –°—ä–µ–¥–µ–Ω–æ: {eaten_today} –∫–∫–∞–ª\n\n‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /goal –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –æ—Å—Ç–∞—Ç–∫–∞ –∫–∞–ª–æ—Ä–∏–π."
        
        left = norm - eaten_today
        if left > 0:
            left_message = f"–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {left} –∫–∫–∞–ª"
            if burned_today > 0:
                left_message += f" (+ {burned_today} –∫–∫–∞–ª –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)"
        else:
            left_message = f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã: {abs(left)} –∫–∫–∞–ª"
    
    return left_message
