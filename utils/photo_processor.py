# -*- coding: utf-8 -*-
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –µ–¥—ã
"""
import base64
import os
import re
import logging
from typing import Optional, Dict, Any, List

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–∑ main.py
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

# –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã OpenAI
import openai_safe

from utils.calorie_calculator import ask_gpt, extract_nutrition_smart, validate_calorie_result
from utils.nutrition_validator import validate_nutrition_data, estimate_portion_calories
from data.calorie_database import CALORIE_DATABASE


async def analyze_food_photo(image_base64: str) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ –µ–¥—ã —á–µ—Ä–µ–∑ GPT Vision"""
    prompt = f"""–ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–£–ô –§–û–¢–û –ï–î–´ –ü–û–®–ê–ì–û–í–û:

üìã –®–ê–ì 1 - –û–ü–ò–°–ê–ù–ò–ï –ë–õ–Æ–î–ê:
–ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å: "–ù–∞ —Ñ–æ—Ç–æ [–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞] - [—Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∏–¥–∏–º—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤]"

üìä –®–ê–ì 2 - –†–ê–°–ß–ï–¢ –ö–ê–ñ–î–û–ì–û –ò–ù–ì–†–ï–î–ò–ï–ù–¢–ê:
–ò—Å–ø–æ–ª—å–∑—É–π —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {CALORIE_DATABASE}

–ë–∞–∑–æ–≤–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ 100–≥:
‚Ä¢ –¢–≤–æ—Ä–æ–≥ 5%: 120 –∫–∫–∞–ª, 17–≥ –±–µ–ª–∫–∞, 5–≥ –∂–∏—Ä–∞, 2–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤
‚Ä¢ –ë–∞–Ω–∞–Ω: 90 –∫–∫–∞–ª, 1.5–≥ –±–µ–ª–∫–∞, 0.3–≥ –∂–∏—Ä–∞, 23–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤  
‚Ä¢ –ê—Ä–∞—Ö–∏—Å–æ–≤–∞—è –ø–∞—Å—Ç–∞: 600 –∫–∫–∞–ª, 25–≥ –±–µ–ª–∫–∞, 50–≥ –∂–∏—Ä–∞, 20–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –ø–æ–∫–∞–∂–∏ —Ä–∞—Å—á–µ—Ç:
"[–ù–∞–∑–≤–∞–Ω–∏–µ] ~[–≤–µ—Å]–≥: [–∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ 100–≥]√ó[–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç] = [–∏—Ç–æ–≥–æ –∫–∫–∞–ª], [–±–µ–ª–∫–∏]–≥ –±–µ–ª–∫–∞, [–∂–∏—Ä—ã]–≥ –∂–∏—Ä–∞, [—É–≥–ª–µ–≤–æ–¥—ã]–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤"

üíØ –®–ê–ì 3 - –ò–¢–û–ì–û–í–ê–Ø –°–£–ú–ú–ê:
"–ò–¢–û–ì–û: [—Å—É–º–º–∞ –∫–∞–ª–æ—Ä–∏–π] –∫–∫–∞–ª, [—Å—É–º–º–∞ –±–µ–ª–∫–æ–≤] –≥ –±–µ–ª–∫–∞, [—Å—É–º–º–∞ –∂–∏—Ä–æ–≤] –≥ –∂–∏—Ä–æ–≤, [—Å—É–º–º–∞ —É–≥–ª–µ–≤–æ–¥–æ–≤] –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤"

üéØ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
‚úÖ –ù–ê–ß–ù–ò —Å –æ–ø–∏—Å–∞–Ω–∏—è: "–ù–∞ —Ñ–æ—Ç–æ [–±–ª—é–¥–æ] - [–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã]"
‚úÖ –ü–æ–∫–∞–∂–∏ —Ä–∞—Å—á–µ—Ç –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
‚úÖ –î–∞–π –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –≤ —Ç–æ—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
‚úÖ –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –±–ª—é–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 250+ –∫–∫–∞–ª

–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:
"–ù–∞ —Ñ–æ—Ç–æ —Ç–≤–æ—Ä–æ–≥ —Å –±–∞–Ω–∞–Ω–æ–º –∏ –∞—Ä–∞—Ö–∏—Å–æ–≤–æ–π –ø–∞—Å—Ç–æ–π - —Ç–≤–æ—Ä–æ–≥, –∫—É—Å–æ—á–∫–∏ –±–∞–Ω–∞–Ω–∞, –ª–æ–∂–∫–∞ –∞—Ä–∞—Ö–∏—Å–æ–≤–æ–π –ø–∞—Å—Ç—ã.

–¢–≤–æ—Ä–æ–≥ 5% ~150–≥: 120√ó1.5 = 180 –∫–∫–∞–ª, 25.5–≥ –±–µ–ª–∫–∞, 7.5–≥ –∂–∏—Ä–∞, 3–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤
–ë–∞–Ω–∞–Ω ~80–≥: 90√ó0.8 = 72 –∫–∫–∞–ª, 1.2–≥ –±–µ–ª–∫–∞, 0.24–≥ –∂–∏—Ä–∞, 18.4–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤
–ê—Ä–∞—Ö–∏—Å–æ–≤–∞—è –ø–∞—Å—Ç–∞ ~20–≥: 600√ó0.2 = 120 –∫–∫–∞–ª, 5–≥ –±–µ–ª–∫–∞, 10–≥ –∂–∏—Ä–∞, 4–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤

–ò–¢–û–ì–û: 372 –∫–∫–∞–ª, 31.7 –≥ –±–µ–ª–∫–∞, 17.74 –≥ –∂–∏—Ä–æ–≤, 25.4 –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤"

–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ—è—Å–Ω–æ - –∑–∞–¥–∞–π –û–î–ò–ù –≤–æ–ø—Ä–æ—Å —Å "–í–û–ü–†–û–°:".
"""

    messages = [{
        'role': 'user',
        'content': [
            {'type': 'text', 'text': prompt},
            {'type': 'image_url', 'image_url': {'url': f'data:image/jpeg;base64,{image_base64}'}}
        ]
    }]

    try:
        response = await ask_gpt(messages)
        logging.info(f"GPT photo analysis response: {response}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–∫–∞–∑ GPT
        refusal_phrases = ['–∏–∑–≤–∏–Ω–∏—Ç–µ', '–Ω–µ –º–æ–≥—É', '–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ', '–Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏']
        if any(phrase in response.lower() for phrase in refusal_phrases):
            return {'error': 'GPT –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ'}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–¥–∞–ª –ª–∏ GPT –≤–æ–ø—Ä–æ—Å
        if "–í–û–ü–†–û–°:" in response:
            question = response.replace("–í–û–ü–†–û–°:", "").strip()
            return {'question': question}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        nutrition = extract_nutrition_smart(response)
        description = extract_description_from_photo_response(response)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ: –∫–∞–ª–æ—Ä–∏–∏={nutrition['calories']}, –±–µ–ª–∫–∏={nutrition['protein']}, –∂–∏—Ä—ã={nutrition['fat']}, —É–≥–ª–µ–≤–æ–¥—ã={nutrition['carbs']}")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        if nutrition['calories'] or nutrition['protein']:
            nutrition = validate_nutrition_data(nutrition, description)
            logging.info(f"–ü–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –∫–∞–ª–æ—Ä–∏–∏={nutrition['calories']}, –±–µ–ª–∫–∏={nutrition['protein']}, –∂–∏—Ä—ã={nutrition['fat']}, —É–≥–ª–µ–≤–æ–¥—ã={nutrition['carbs']}")
        
        if nutrition['calories'] and description:
            validated_kcal = validate_calorie_result(description, nutrition['calories'])
            result = {
                'description': description,
                'calories': validated_kcal,
                'success': True
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ë–ñ–£ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
            if nutrition['protein'] is not None:
                result['protein'] = round(nutrition['protein'], 1)
            if nutrition['fat'] is not None:
                result['fat'] = round(nutrition['fat'], 1)
            if nutrition['carbs'] is not None:
                result['carbs'] = round(nutrition['carbs'], 1)
            
            return result
        else:
            return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–∞–ª–æ—Ä–∏–∏ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞'}
            
    except Exception as e:
        logging.error(f"Error analyzing photo: {e}")
        return {'error': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ: {str(e)}'}


def extract_calories_from_photo_response(response: str) -> Optional[int]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞–ª–æ—Ä–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ GPT –ø–æ —Ñ–æ—Ç–æ"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ —Å–ª–æ–≤ "–∏—Ç–æ–≥–æ", "–≤—Å–µ–≥–æ", "–æ–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å"
    total_match = re.search(r'(?:–∏—Ç–æ–≥–æ|–≤—Å–µ–≥–æ|–æ–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å)[^0-9]*(\d+)', response, re.IGNORECASE)
    if total_match:
        return int(total_match.group(1))
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ "–∏—Ç–æ–≥–æ", –±–µ—Ä–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ
    numbers = [int(x) for x in re.findall(r'\d+', response)]
    if numbers:
        return max(numbers)  # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫–∞–∫ –∏—Ç–æ–≥–æ–≤—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å
    
    return None


def extract_description_from_photo_response(response: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ GPT"""
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É "–ù–∞ —Ñ–æ—Ç–æ..."
    match = re.search(r'–ù–∞ —Ñ–æ—Ç–æ (.+?)(?:\n|$|\.|,)', response, re.IGNORECASE)
    if match:
        description = match.group(1).strip()
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ
        description = re.sub(r'\s*-\s*.*$', '', description)
        return description
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ "–ù–∞ —Ñ–æ—Ç–æ", –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
    description = response.strip()
    
    # –ï—Å–ª–∏ GPT –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Å—Ä–∞–∑—É –ø–∏—à–µ—Ç –∫–∞–ª–æ—Ä–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    if re.match(r'^\s*(–®–ê–ì|üî•|–ö–∞–ª–æ—Ä–∏–∏|–ë–µ–ª–æ–∫)', response):
        return "–ë–ª—é–¥–æ —Å —Ñ–æ—Ç–æ"

    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —á—Ç–æ –ø–æ—Å–ª–µ "–ò—Ç–æ–≥–æ:" –∏–ª–∏ —Ä–∞—Å—á–µ—Ç—ã
    description = re.sub(r'\s*\.?\s*–ò—Ç–æ–≥–æ:.*$', '', description, flags=re.IGNORECASE | re.DOTALL)
    description = re.sub(r'\s*\d+\s*–∫–∫–∞–ª.*$', '', description, flags=re.DOTALL)
    description = re.sub(r'\n.*?~\d+–≥:.*$', '', description, flags=re.DOTALL)  # —É–±–∏—Ä–∞–µ–º —Ä–∞—Å—á–µ—Ç—ã

    # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    description = re.sub(r'\n+', ' ', description)
    description = re.sub(r'\s+', ' ', description)
    description = description.strip()

    if not description or len(description) < 5:
        description = "–ë–ª—é–¥–æ —Å —Ñ–æ—Ç–æ"

    return description


def extract_ingredients_from_description(description: str) -> List[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª—é–¥–∞"""
    # –£–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–ª–æ–≤–æ (—Ç–≤–æ—Ä–æ–≥, —Å–∞–ª–∞—Ç –∏ —Ç.–¥.) –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –ø–æ—Å–ª–µ "—Å"
    if ' —Å ' in description:
        parts = description.split(' —Å ', 1)
        if len(parts) > 1:
            ingredients_part = parts[1]
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ —Å–æ—é–∑–∞–º
            ingredients = re.split(r',|\s+–∏\s+', ingredients_part)
            return [ing.strip() for ing in ingredients if ing.strip()]
    
    return []


def get_base_dish_from_description(description: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–∞–∑–æ–≤–æ–µ –±–ª—é–¥–æ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è"""
    if ' —Å ' in description:
        return description.split(' —Å ')[0].strip()
    return description.strip()
