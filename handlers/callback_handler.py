# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
"""
import datetime
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–∑ main.py
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

from utils.user_data import (
    get_user_profile, save_user_profile, get_user_diary, 
    save_user_diary, get_user_weights, save_user_weights,
    get_user_food_log, save_user_food_log, get_user_burned,
    save_user_burned, load_user_data, save_user_data
)
from utils.calorie_calculator import calculate_bmr_tdee, get_calories_left_message


async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
    user_id = str(update.effective_user.id)
    query = update.callback_query
    today = datetime.date.today().isoformat()

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    try:
        await query.answer()
    except Exception as e:
        logging.warning(f"Callback query answer failed: {e}")

    if query.data == 'check_left':
        await handle_check_left(query, user_id, today)
    
    elif query.data.startswith('goal_'):
        await handle_goal_selection(query, context, user_id, query.data)
    
    elif query.data.startswith('save_weight_'):
        await handle_save_weight(query, context, user_id, query.data, today)
    
    elif query.data.startswith('save_calories_'):
        await handle_save_calories(query, context, user_id, query.data, today)
    
    elif query.data.startswith('use_yesterday_weight_'):
        await handle_use_yesterday_weight(query, context, user_id, query.data, today)
    
    elif query.data == 'confirm_reset':
        await handle_confirm_reset(query, context, user_id)
    
    elif query.data == 'cancel_reset':
        await handle_cancel_reset(query)
    
    elif query.data == 'cancel_input':
        await handle_cancel_input(query, context)
    
    elif query.data == 'confirm_photo':
        await handle_confirm_photo(query, context, user_id)
    
    elif query.data == 'edit_photo':
        await handle_edit_photo(query, context, user_id)


async def handle_check_left(query, user_id, today):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π"""
    profile = get_user_profile(user_id)
    diary = get_user_diary(user_id)
    burned = get_user_burned(user_id)
    
    left_message = get_calories_left_message(profile, diary, burned, today)
    
    try:
        await query.edit_message_text(left_message)
    except Exception as e:
        logging.warning(f"Message edit failed: {e}")
        await query.message.reply_text(left_message)


async def handle_goal_selection(query, context, user_id, goal_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏"""
    goal = goal_data.replace('goal_', '')
    profile = get_user_profile(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    required_fields = ['weight', 'height', 'age', 'sex']
    if not all(field in profile for field in required_fields):
        await query.edit_message_text(
            '‚ùå –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n'
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.'
        )
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏
    calc_result = calculate_bmr_tdee(
        weight=profile['weight'],
        height=profile['height'],
        age=profile['age'],
        sex=profile['sex'],
        goal=goal
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile.update(calc_result)
    profile['target_calories'] = calc_result['target']
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ª–∏–º–∏—Ç–∞, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç
    profile['custom_limit'] = False
    # –£–¥–∞–ª—è–µ–º registration_step, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    if 'registration_step' in profile:
        del profile['registration_step']
    save_user_profile(user_id, profile)
    
    goal_names = {
        'deficit': 'üî• –ü–æ—Ö—É–¥–µ–Ω–∏–µ (–¥–µ—Ñ–∏—Ü–∏—Ç 20%)',
        'maintain': '‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞',
        'surplus': 'üí™ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã (–ø—Ä–æ—Ñ–∏—Ü–∏—Ç 10%)'
    }
    goal_name = goal_names.get(goal, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–ª—å')
    
    success_msg = f"""‚úÖ –¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {goal_name}

üìä –í–∞—à–∏ –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
üìà –û—Å–Ω–æ–≤–Ω–æ–π –æ–±–º–µ–Ω (BMR): {calc_result['bmr']} –∫–∫–∞–ª
üî• –°—É—Ç–æ—á–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ (TDEE): {calc_result['tdee']} –∫–∫–∞–ª
üéØ –¶–µ–ª–µ–≤–∞—è –Ω–æ—Ä–º–∞: {calc_result['target']} –∫–∫–∞–ª

–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å!"""
    
    try:
        await query.edit_message_text(success_msg)
    except Exception as e:
        await query.message.reply_text(success_msg)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º step
    context.user_data['step'] = 'food'


async def handle_save_weight(query, context, user_id, weight_data, today):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ—Å–∞ –∏–∑ –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
    weight = float(weight_data.replace('save_weight_', ''))
    weights = get_user_weights(user_id)
    weights[today] = weight
    save_user_weights(user_id, weights)
    
    try:
        await query.edit_message_text(f'‚úÖ –í–µ—Å {weight} –∫–≥ –∑–∞–ø–∏—Å–∞–Ω!')
    except Exception as e:
        await query.message.reply_text(f'‚úÖ –í–µ—Å {weight} –∫–≥ –∑–∞–ø–∏—Å–∞–Ω!')
    
    context.user_data.pop('pending_number', None)


async def handle_save_calories(query, context, user_id, calories_data, today):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –∏–∑ –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
    calories = int(float(calories_data.replace('save_calories_', '')))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—ä–µ–¥–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏
    diary = get_user_diary(user_id)
    food_log = get_user_food_log(user_id)
    profile = get_user_profile(user_id)
    
    diary[today] = diary.get(today, 0) + calories
    save_user_diary(user_id, diary)
    
    if today not in food_log:
        food_log[today] = []
    food_log[today].append([f'–ï–¥–∞ ({calories} –∫–∫–∞–ª)', calories])
    save_user_food_log(user_id, food_log)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
    burned = get_user_burned(user_id)
    left_message = get_calories_left_message(profile, diary, burned, today)
    
    try:
        await query.edit_message_text(f'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {calories} –∫–∫–∞–ª. {left_message}')
    except Exception as e:
        await query.message.reply_text(f'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {calories} –∫–∫–∞–ª. {left_message}')
    
    context.user_data.pop('pending_number', None)


async def handle_use_yesterday_weight(query, context, user_id, weight_data, today):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –≤–µ—Å–∞"""
    weight = float(weight_data.replace('use_yesterday_weight_', ''))
    weights = get_user_weights(user_id)
    weights[today] = weight
    save_user_weights(user_id, weights)
    
    try:
        await query.edit_message_text(f'‚úÖ –í–µ—Å {weight} –∫–≥ –∑–∞–ø–∏—Å–∞–Ω (–∫–∞–∫ –≤—á–µ—Ä–∞)!')
    except Exception as e:
        await query.message.reply_text(f'‚úÖ –í–µ—Å {weight} –∫–≥ –∑–∞–ø–∏—Å–∞–Ω (–∫–∞–∫ –≤—á–µ—Ä–∞)!')
    
    context.user_data['step'] = None


async def handle_confirm_reset(query, context, user_id):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    empty_data = {
        'profile': {},
        'diary': {},
        'weights': {},
        'food_log': {},
        'burned': {}
    }
    save_user_data(user_id, empty_data)
    
    try:
        await query.edit_message_text(
            '‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–±—Ä–æ—à–µ–Ω!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.'
        )
    except Exception as e:
        await query.message.reply_text(
            '‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–±—Ä–æ—à–µ–Ω!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.'
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.clear()


async def handle_cancel_reset(query):
    """–û—Ç–º–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        await query.edit_message_text('‚ùå –°–±—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω.')
    except Exception as e:
        await query.message.reply_text('‚ùå –°–±—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω.')


async def handle_cancel_input(query, context):
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞"""
    try:
        await query.edit_message_text('‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.')
    except Exception as e:
        await query.message.reply_text('‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.')
    
    context.user_data.pop('pending_number', None)


async def handle_confirm_photo(query, context, user_id):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞ —Å —Ñ–æ—Ç–æ"""
    from .photo_handler import handle_photo_confirmation
    
    try:
        response_text, reply_markup = await handle_photo_confirmation(
            None, context, user_id, confirm=True
        )
        await query.edit_message_text(response_text, reply_markup=reply_markup)
    except Exception as e:
        logging.error(f"Error confirming photo: {e}")
        await query.message.reply_text(
            f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ñ–æ—Ç–æ:\n'
            f'`{str(e)}`\n\n'
            f'–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}\n'
            f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.'
        )


async def handle_edit_photo(query, context, user_id):
    """–ó–∞–ø—Ä–æ—Å —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ç–æ"""
    from .photo_handler import handle_photo_confirmation
    
    try:
        response_text, reply_markup = await handle_photo_confirmation(
            None, context, user_id, confirm=False
        )
        await query.edit_message_text(response_text, reply_markup=reply_markup)
    except Exception as e:
        logging.error(f"Error editing photo: {e}")
        await query.message.reply_text(
            f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ:\n'
            f'`{str(e)}`\n\n'
            f'–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}\n'
            f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.'
        )

# –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
handle_callback = handle_callback_query
