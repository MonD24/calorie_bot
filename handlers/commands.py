# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""
import datetime
import logging
import traceback
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–∑ main.py
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

from utils.user_data import (
    get_user_profile, save_user_profile, get_user_diary, save_user_diary, 
    get_user_burned, get_user_food_log, save_user_food_log, save_user_burned
)
from utils.calorie_calculator import calculate_bmr_tdee, get_calories_left_message
from config import VALIDATION_LIMITS


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    user_id = str(update.effective_user.id)
    profile = get_user_profile(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not profile or ('target_calories' not in profile and 'norm' not in profile):
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        profile = {}
        save_user_profile(user_id, profile)
        await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å (–∫–≥):')
        context.user_data['step'] = 'weight'
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await show_user_status(update, user_id)
        context.user_data['step'] = 'food'


async def show_user_status(update: Update, user_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = get_user_profile(user_id)
    diary = get_user_diary(user_id)
    burned = get_user_burned(user_id)
    today = datetime.date.today().isoformat()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –µ—â—ë –Ω–µ—Ç
    if today not in diary:
        diary[today] = 0
        from ..utils.user_data import save_user_diary
        save_user_diary(user_id, diary)
    
    eaten_today = diary.get(today, 0)
    burned_today = burned.get(today, 0)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    target_calories = profile.get('target_calories')
    bmr = profile.get('bmr', 0)
    tdee = profile.get('tdee', 0)
    goal = profile.get('goal', 'deficit')
    
    goal_names = {
        'deficit': 'üî• –ü–æ—Ö—É–¥–µ–Ω–∏–µ',
        'maintain': '‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞',
        'surplus': 'üí™ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã'
    }
    goal_name = goal_names.get(goal, '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞—Ç–∫–µ –∫–∞–ª–æ—Ä–∏–π
    left_message = get_calories_left_message(profile, diary, burned, today)

    if target_calories:
        # –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å—á—ë—Ç–æ–º
        net_calories = eaten_today - burned_today
        
        status_msg = f"""üî• –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!

üìä –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
üìà –û—Å–Ω–æ–≤–Ω–æ–π –æ–±–º–µ–Ω (BMR): {bmr} –∫–∫–∞–ª
üî• –°—É—Ç–æ—á–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ (TDEE): {tdee} –∫–∫–∞–ª
üéØ –¶–µ–ª—å: {goal_name}
üçΩÔ∏è –¶–µ–ª–µ–≤–∞—è –Ω–æ—Ä–º–∞: {target_calories} –∫–∫–∞–ª

üìù –°–µ–≥–æ–¥–Ω—è:
üçΩÔ∏è –°—ä–µ–¥–µ–Ω–æ: {eaten_today} –∫–∫–∞–ª
üèÉ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {burned_today} –∫–∫–∞–ª
‚öñÔ∏è –ß–∏—Å—Ç—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {net_calories} –∫–∫–∞–ª
‚ú® {left_message}"""
    else:
        # –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        norm = profile.get('norm', 0)
        target_limit = profile.get('target_limit')
        
        if target_limit:
            net_calories = eaten_today - burned_today
            deficit = norm - target_limit

            status_msg = f"""üî• –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!

üìä –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞):
üìà –û—Å–Ω–æ–≤–Ω–æ–π –æ–±–º–µ–Ω: {norm} –∫–∫–∞–ª
üéØ –¶–µ–ª–µ–≤–æ–π –ª–∏–º–∏—Ç: {target_limit} –∫–∫–∞–ª
üî• –î–µ—Ñ–∏—Ü–∏—Ç: {deficit} –∫–∫–∞–ª

üìù –°–µ–≥–æ–¥–Ω—è:
üçΩÔ∏è –°—ä–µ–¥–µ–Ω–æ: {eaten_today} –∫–∫–∞–ª
üèÉ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {burned_today} –∫–∫–∞–ª
‚öñÔ∏è –ß–∏—Å—Ç—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {net_calories} –∫–∫–∞–ª
‚ú® {left_message}"""
        else:
            status_msg = f"""üî• –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!

üìà –í–∞—à–∞ –Ω–æ—Ä–º–∞: {norm} –∫–∫–∞–ª
üìù –°—ä–µ–¥–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {eaten_today} –∫–∫–∞–ª
üèÉ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {burned_today} –∫–∫–∞–ª
‚ú® {left_message}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /goal –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –∫–∞–ª–æ—Ä–∏–π"""

    status_msg += "\n\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –∏–ª–∏ –ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º —á—Ç–æ –µ–¥–∏—Ç–µ!"

    await update.message.reply_text(
        status_msg,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton('–°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –∫–∞–ª–æ—Ä–∏–π?', callback_data='check_left')]
        ])
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞"""
    help_text = """ü§ñ *–ö–∞–ª–æ—Ä–∏–π–Ω—ã–π –±–æ—Ç - —Å–ø—Ä–∞–≤–∫–∞*

üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/goal - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å (–ø–æ—Ö—É–¥–µ–Ω–∏–µ/–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ/–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã)
/weight - –ó–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–µ—Å
/burn - –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏
/left - –£–∑–Ω–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –¥–µ–Ω—å
/food - –ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –µ–¥—ã –∑–∞ –¥–µ–Ω—å
/clear\_today - –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/reset - –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ)
/limit - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –∫–∞–ª–æ—Ä–∏–π (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)

üçΩÔ∏è *–ö–∞–∫ –¥–æ–±–∞–≤–ª—è—Ç—å –µ–¥—É:*
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º —á—Ç–æ –µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: "—Ç–≤–æ—Ä–æ–≥ —Å –∞—Ä–±—É–∑–æ–º"
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –∫–∞–ª–æ—Ä–∏–∏

üéØ *–°–∏—Å—Ç–µ–º–∞ —Ü–µ–ª–µ–π:*
üî• –ü–æ—Ö—É–¥–µ–Ω–∏–µ - –¥–µ—Ñ–∏—Ü–∏—Ç 20% –æ—Ç –Ω–æ—Ä–º—ã
‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞ - –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π  
üí™ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã - –ø—Ä–æ—Ñ–∏—Ü–∏—Ç 10% –æ—Ç –Ω–æ—Ä–º—ã

‚è∞ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–µ—Å–µ (6:00 –ú–°–ö)
‚Ä¢ –í–µ—á–µ—Ä–Ω–∏–π –∏—Ç–æ–≥ –¥–Ω—è (21:00 –ú–°–ö)
‚Ä¢ –£–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

üí° *–°–æ–≤–µ—Ç:* –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º –Ω–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å "/" –≤ –ø–æ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')


async def goal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /goal - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏"""
    keyboard = [
        [InlineKeyboardButton('üî• –ü–æ—Ö—É–¥–µ–Ω–∏–µ (–¥–µ—Ñ–∏—Ü–∏—Ç 20%)', callback_data='goal_deficit')],
        [InlineKeyboardButton('‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞', callback_data='goal_maintain')],
        [InlineKeyboardButton('üí™ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã (–ø—Ä–æ—Ñ–∏—Ü–∏—Ç 10%)', callback_data='goal_surplus')]
    ]
    
    await update.message.reply_text(
        'üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def weight_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /weight - –∑–∞–ø–∏—Å—å –≤–µ—Å–∞"""
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–∫–≥):')
    context.user_data['step'] = 'daily_weight'


async def burn_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /burn - –∑–∞–ø–∏—Å—å –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π"""
    await update.message.reply_text('–°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è?')
    context.user_data['step'] = 'burn_calories'


async def left_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /left - –æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π"""
    user_id = str(update.effective_user.id)
    profile = get_user_profile(user_id)
    diary = get_user_diary(user_id)
    burned = get_user_burned(user_id)
    today = datetime.date.today().isoformat()
    
    left_message = get_calories_left_message(profile, diary, burned, today)
    await update.message.reply_text(left_message)


async def clear_today_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /clear_today - –æ—á–∏—Å—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π –∑–∞ –¥–µ–Ω—å"""
    user_id = str(update.effective_user.id)
    today = datetime.date.today().isoformat()
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    diary = get_user_diary(user_id)
    food_log = get_user_food_log(user_id)
    burned = get_user_burned(user_id)
    
    diary[today] = 0
    food_log[today] = []
    burned[today] = 0
    
    save_user_diary(user_id, diary)
    save_user_food_log(user_id, food_log)
    save_user_burned(user_id, burned)
    
    await update.message.reply_text('‚úÖ –ó–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—á–∏—â–µ–Ω—ã!')


async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /reset - —Å–±—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è"""
    keyboard = [
        [InlineKeyboardButton('‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å', callback_data='confirm_reset')],
        [InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_reset')]
    ]
    
    await update.message.reply_text(
        '‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è?\n'
        '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def limit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /limit - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –∫–∞–ª–æ—Ä–∏–π (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è)"""
    await update.message.reply_text(
        '‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ /limit —É—Å—Ç–∞—Ä–µ–ª–∞!\n\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /goal –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Ü–µ–ª–∏.'
    )


async def food_log_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /food - –ø–æ–∫–∞–∑–∞—Ç—å –¥–Ω–µ–≤–Ω–æ–π –∂—É—Ä–Ω–∞–ª –µ–¥—ã"""
    user_id = str(update.effective_user.id)
    today = datetime.date.today().isoformat()
    
    # DEBUG: –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.info(f"üîç DEBUG food_log_command: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –¥–∞—Ç–∞ {today}")
    
    try:
        food_log = get_user_food_log(user_id)
        logging.info(f"üîç DEBUG food_log_command: –ü–æ–ª–Ω—ã–π food_log = {food_log}")
        logging.info(f"üîç DEBUG food_log_command: –¢–∏–ø food_log = {type(food_log)}")
        logging.info(f"üîç DEBUG food_log_command: –ö–ª—é—á–∏ –≤ food_log = {list(food_log.keys())}")
        
        today_foods = food_log.get(today, [])
        logging.info(f"üîç DEBUG food_log_command: –ï–¥–∞ –∑–∞ {today} = {today_foods}")
        logging.info(f"üîç DEBUG food_log_command: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π = {len(today_foods)}")
        
        if not today_foods:
            logging.info("üîç DEBUG food_log_command: –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
            await update.message.reply_text('üìù –°–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ.')
            logging.info("üîç DEBUG food_log_command: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º –¥–Ω–µ–≤–Ω–∏–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ–±–∑–æ—Ä
        message_lines = ['üìã **–î–Ω–µ–≤–Ω–∏–∫ –µ–¥—ã:**\n']
        total_calories = 0
        total_protein = 0
        
        for i, food_entry in enumerate(today_foods, 1):
            logging.info(f"üîç DEBUG food_log_command: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å {i}: {food_entry}")
            
            if len(food_entry) >= 3:  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –±–µ–ª–∫–æ–º
                name, calories, protein = food_entry[0], food_entry[1], food_entry[2]
                protein_text = f', {protein}–≥ –±–µ–ª–∫–∞' if protein else ''
                logging.info(f"üîç DEBUG food_log_command: –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - {name}, {calories}–∫–∫–∞–ª, {protein}–≥ –±–µ–ª–∫–∞")
            elif len(food_entry) >= 2:  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –±–µ–ª–∫–∞
                name, calories = food_entry[0], food_entry[1]
                protein = 0
                protein_text = ''
                logging.info(f"üîç DEBUG food_log_command: –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - {name}, {calories}–∫–∫–∞–ª")
            else:
                logging.warning(f"üîç DEBUG food_log_command: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏: {food_entry}")
                continue
            
            total_calories += calories
            if protein:
                total_protein += protein
            
            message_lines.append(f'{i}. {name}: {calories} –∫–∫–∞–ª{protein_text}')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–∏
        message_lines.append(f'\n**–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:**')
        message_lines.append(f'üî• –ö–∞–ª–æ—Ä–∏–∏: {total_calories} –∫–∫–∞–ª')
        if total_protein > 0:
            message_lines.append(f'üí™ –ë–µ–ª–æ–∫: {total_protein}–≥')
        
        message_text = '\n'.join(message_lines)
        logging.info(f"üîç DEBUG food_log_command: –ì–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–æ–π {len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        logging.info(f"üîç DEBUG food_log_command: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {message_text}")
        
        await update.message.reply_text(message_text, parse_mode='Markdown')
        logging.info("üîç DEBUG food_log_command: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –£–°–ü–ï–®–ù–û!")
        
    except Exception as e:
        logging.error(f"üîç DEBUG food_log_command: –û–®–ò–ë–ö–ê - {e}")
        logging.error(f"üîç DEBUG food_log_command: Traceback - {traceback.format_exc()}")
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞: {str(e)}')


async def evening_summary_function(context, user_id):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ–±–∑–æ—Ä–∞"""
    today = datetime.date.today().isoformat()
    
    food_log = get_user_food_log(user_id)
    today_foods = food_log.get(today, [])
    
    if not today_foods:
        message = 'üåô **–í–µ—á–µ—Ä–Ω–∏–π –æ–±–∑–æ—Ä**\n\nüìù –°–µ–≥–æ–¥–Ω—è –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫.'
    else:
        # –°–æ–∑–¥–∞–µ–º –æ–±–∑–æ—Ä
        message_lines = ['üåô **–í–µ—á–µ—Ä–Ω–∏–π –æ–±–∑–æ—Ä –¥–Ω—è**\n']
        total_calories = 0
        total_protein = 0
        
        for food_entry in today_foods:
            if len(food_entry) >= 3:  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –±–µ–ª–∫–æ–º
                name, calories, protein = food_entry[0], food_entry[1], food_entry[2]
            elif len(food_entry) >= 2:  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –±–µ–ª–∫–∞
                name, calories = food_entry[0], food_entry[1]
                protein = 0
            else:
                continue
                
            total_calories += calories
            if protein:
                total_protein += protein
        
        message_lines.append(f'üî• –í—Å–µ–≥–æ –∫–∞–ª–æ—Ä–∏–π: {total_calories} –∫–∫–∞–ª')
        if total_protein > 0:
            message_lines.append(f'üí™ –í—Å–µ–≥–æ –±–µ–ª–∫–∞: {total_protein}–≥')
        
        message_lines.append(f'\nüìù –ó–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ: {len(today_foods)}')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π
        profile = get_user_profile(user_id)
        diary = get_user_diary(user_id)
        burned = get_user_burned(user_id)
        left_message = get_calories_left_message(profile, diary, burned, today)
        message_lines.append(f'\n{left_message}')
        
        message = '\n'.join(message_lines)
    
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=message,
            parse_mode='Markdown'
        )
    except Exception as e:
        logging.error(f"Failed to send evening summary to {user_id}: {e}")


async def morning_weight_function(context, user_id):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤–µ—Å–∞"""
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text='üåÖ **–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!**\n\n‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–∫–≥):',
            parse_mode='Markdown'
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≤–µ—Å–∞
        context.user_data['step'] = 'daily_weight'
    except Exception as e:
        logging.error(f"Failed to send morning weight request to {user_id}: {e}")
