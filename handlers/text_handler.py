# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import datetime
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–∑ main.py
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

# –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã OpenAI
import openai_safe

from utils.user_data import (
    get_user_profile, save_user_profile, get_user_diary,
    save_user_diary, get_user_weights, save_user_weights,
    get_user_food_log, save_user_food_log, get_user_burned, save_user_burned
)
from utils.calorie_calculator import (
    create_calorie_prompt, ask_gpt, extract_nutrition_smart,
    validate_calorie_result, get_calories_left_message,
    calculate_bmr_tdee
)
from utils.error_handler import format_error_message, log_detailed_error
from config import VALIDATION_LIMITS


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_user.id)
    step = context.user_data.get('step')
    text = update.message.text.strip()
    today = datetime.date.today().isoformat()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile = get_user_profile(user_id)
    diary = get_user_diary(user_id)
    weights = get_user_weights(user_id)
    food_log = get_user_food_log(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    if not step and profile and 'registration_step' in profile:
        step = profile['registration_step']
        context.user_data['step'] = step

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –µ—â—ë –Ω–µ—Ç
    if today not in diary:
        diary[today] = 0
        save_user_diary(user_id, diary)

    # === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
    if step == 'weight':
        await handle_weight_input(update, context, text, profile, user_id)
        return
    elif step == 'height':
        await handle_height_input(update, context, text, profile, user_id)
        return
    elif step == 'age':
        await handle_age_input(update, context, text, profile, user_id)
        return
    elif step == 'sex':
        await handle_sex_input(update, context, text, profile, user_id)
        return

    # === –ï–ñ–ï–î–ù–ï–í–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò ===
    elif step == 'daily_weight':
        await handle_daily_weight(update, context, text, weights, user_id, today)
        return
    elif step == 'burn_calories':
        await handle_burn_calories(update, context, text, user_id, today)
        return

    # === –û–ë–†–ê–ë–û–¢–ö–ê –ï–î–´ ===
    elif step == 'food' or step is None:
        await handle_food_input(update, context, text, user_id, today, diary, food_log, profile)
        return

    # === –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ===
    elif context.user_data.get('waiting_for_clarification'):
        await handle_food_clarification(update, context, text, user_id, today, diary, food_log, profile)
        return

    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –Ω–∏ –≤ –æ–¥–∏–Ω case
    await update.message.reply_text(
        '–ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.'
    )


async def handle_weight_input(update, context, text, profile, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–µ—Å–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        weight = float(text.replace(',', '.'))
        limits = VALIDATION_LIMITS['weight']
        if limits['min'] <= weight <= limits['max']:
            profile['weight'] = weight
            profile['registration_step'] = 'height'
            save_user_profile(user_id, profile)
            await update.message.reply_text('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç (—Å–º):')
            context.user_data['step'] = 'height'
        else:
            await update.message.reply_text(f'–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å –æ—Ç {limits["min"]} –¥–æ {limits["max"]} –∫–≥')
    except ValueError:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 70')


async def handle_height_input(update, context, text, profile, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        height = float(text.replace(',', '.'))
        limits = VALIDATION_LIMITS['height']
        if limits['min'] <= height <= limits['max']:
            profile['height'] = height
            profile['registration_step'] = 'age'
            save_user_profile(user_id, profile)
            await update.message.reply_text('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
            context.user_data['step'] = 'age'
        else:
            await update.message.reply_text(f'–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –æ—Ç {limits["min"]} –¥–æ {limits["max"]} —Å–º')
    except ValueError:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç –≤ —Å–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 175')


async def handle_age_input(update, context, text, profile, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        age = int(text)
        limits = VALIDATION_LIMITS['age']
        if limits['min'] <= age <= limits['max']:
            profile['age'] = age
            profile['registration_step'] = 'sex'
            save_user_profile(user_id, profile)
            await update.message.reply_text('–£–∫–∞–∂–∏ –ø–æ–ª (–º—É–∂/–∂–µ–Ω):')
            context.user_data['step'] = 'sex'
        else:
            await update.message.reply_text(f'–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç {limits["min"]} –¥–æ {limits["max"]} –ª–µ—Ç')
    except ValueError:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 30')


async def handle_sex_input(update, context, text, profile, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    sex = text.lower()
    if sex not in ['–º—É–∂', '–∂–µ–Ω']:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ "–º—É–∂" –∏–ª–∏ "–∂–µ–Ω"')
        return

    profile['sex'] = sex
    profile['registration_step'] = 'goal'
    save_user_profile(user_id, profile)

    # –¢–µ–ø–µ—Ä—å —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Ü–µ–ª–∏
    keyboard = [
        [InlineKeyboardButton('üî• –ü–æ—Ö—É–¥–µ–Ω–∏–µ (–¥–µ—Ñ–∏—Ü–∏—Ç 20%)', callback_data='goal_deficit')],
        [InlineKeyboardButton('‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞', callback_data='goal_maintain')],
        [InlineKeyboardButton('üí™ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã (–ø—Ä–æ—Ñ–∏—Ü–∏—Ç 10%)', callback_data='goal_surplus')]
    ]

    await update.message.reply_text(
        'üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data['step'] = 'goal'


async def handle_daily_weight(update, context, text, weights, user_id, today):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤–µ—Å–∞"""
    try:
        weight = float(text.replace(',', '.'))
        limits = VALIDATION_LIMITS['weight']
        if limits['min'] <= weight <= limits['max']:
            weights[today] = weight
            save_user_weights(user_id, weights)
            await update.message.reply_text(f'‚úÖ –í–µ—Å {weight} –∫–≥ –∑–∞–ø–∏—Å–∞–Ω!')
            context.user_data['step'] = None
        else:
            await update.message.reply_text(f'–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å –æ—Ç {limits["min"]} –¥–æ {limits["max"]} –∫–≥')
    except ValueError:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 70')


async def handle_burn_calories(update, context, text, user_id, today):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π"""
    try:
        burned_calories = int(text)
        if 0 <= burned_calories <= 5000:  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
            burned = get_user_burned(user_id)
            burned[today] = burned_calories
            save_user_burned(user_id, burned)
            await update.message.reply_text(f'‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: –ø–æ—Ç—Ä–∞—á–µ–Ω–æ {burned_calories} –∫–∫–∞–ª')
            context.user_data['step'] = None
        else:
            await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –æ—Ç 0 –¥–æ 5000')
    except ValueError:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 300')


def parse_manual_calories(text):
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - "—à–æ–∫–æ–ª–∞–¥–∫–∞, 205 –∫–∫–∞–ª"
    - "—à–æ–∫–æ–ª–∞–¥–∫–∞ 205 –∫–∫–∞–ª"
    - "—à–æ–∫–æ–ª–∞–¥–∫–∞ - 205–∫–∫–∞–ª"
    - "—à–æ–∫–æ–ª–∞–¥–∫–∞: 205 –∫–∞–ª–æ—Ä–∏–π"

    Returns:
        tuple: (food_name, calories) –∏–ª–∏ (None, None) –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    """
    import re

    # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–ª–æ—Ä–∏–π
    patterns = [
        r'^(.+?)[,\-:\s]+(\d+)\s*(?:–∫–∫–∞–ª|–∫–∞–ª–æ—Ä–∏[–π—è–µ]|–∫–∞–ª–æ—Ä–∏–π|kcal)\s*$',
        r'^(.+?)\s+(\d+)\s*(?:–∫–∫–∞–ª|–∫–∞–ª–æ—Ä–∏[–π—è–µ]|–∫–∞–ª–æ—Ä–∏–π|kcal)\s*$',
    ]

    text_clean = text.strip()

    for pattern in patterns:
        match = re.search(pattern, text_clean, re.IGNORECASE)
        if match:
            food_name = match.group(1).strip()
            calories = int(match.group(2))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π
            if 1 <= calories <= 5000:  # –†–∞–∑—É–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
                return food_name, calories

    return None, None


async def handle_food_input(update, context, text, user_id, today, diary, food_log, profile):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –µ–¥—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–≤–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ (–≤–æ–∑–º–æ–∂–Ω—ã–π –≤–µ—Å –∏–ª–∏ –∫–∞–ª–æ—Ä–∏–∏)
    if await handle_ambiguous_number(update, context, text):
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–∫–∞–∑–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–ª–æ—Ä–∏–∏ –≤ —è–≤–Ω–æ–º –≤–∏–¥–µ
    food_name, manual_calories = parse_manual_calories(text)
    if food_name and manual_calories:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º —É–∫–∞–∑–∞–ª –∫–∞–ª–æ—Ä–∏–∏ - –Ω–µ –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ GPT
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
            diary[today] += manual_calories
            save_user_diary(user_id, diary)

            if today not in food_log:
                food_log[today] = []
            # –ü—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ –ë–ñ–£ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã
            food_log[today].append([food_name, manual_calories, None, None, None])
            save_user_food_log(user_id, food_log)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π
            burned = get_user_burned(user_id)
            left_message = get_calories_left_message(profile, diary, burned, today)

            await update.message.reply_text(
                f'‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {food_name}, {manual_calories} –∫–∫–∞–ª. {left_message}.',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton('–°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –∫–∞–ª–æ—Ä–∏–π?', callback_data='check_left')]
                ])
            )
            return

        except Exception as e:
            log_detailed_error(e, "–ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–∞–ª–æ—Ä–∏–π", str(user_id),
                             {"food_name": food_name, "calories": manual_calories})
            error_msg = format_error_message(e, "–ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                                           f'–ë–ª—é–¥–æ: "{food_name}", –∫–∞–ª–æ—Ä–∏–∏: {manual_calories}')
            await update.message.reply_text(error_msg)
            return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã —á–µ—Ä–µ–∑ GPT
    try:
        prompt = create_calorie_prompt(text)
        messages = [{'role': 'user', 'content': [{'type': 'text', 'text': prompt}]}]

        response = await ask_gpt(messages)
        logging.info(f"GPT response for food: {response}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–¥–∞–ª –ª–∏ GPT –≤–æ–ø—Ä–æ—Å
        if "–í–û–ü–†–û–°:" in response:
            question = response.replace("–í–û–ü–†–û–°:", "").strip()
            await update.message.reply_text(question)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            context.user_data['pending_food_description'] = text
            context.user_data['waiting_for_clarification'] = True
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –∏ –±–µ–ª–æ–∫
        nutrition = extract_nutrition_smart(response)
        if not nutrition['calories']:
            await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –±–ª—é–¥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.')
            return

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        kcal = validate_calorie_result(text, nutrition['calories'])
        protein = nutrition.get('protein')
        fat = nutrition.get('fat')
        carbs = nutrition.get('carbs')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        diary[today] += kcal
        save_user_diary(user_id, diary)

        if today not in food_log:
            food_log[today] = []
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã]
        food_log[today].append([text, kcal, protein, fat, carbs])
        save_user_food_log(user_id, food_log)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π
        burned = get_user_burned(user_id)
        left_message = get_calories_left_message(profile, diary, burned, today)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏
        nutrition_parts = [f'{kcal} –∫–∫–∞–ª']
        if protein:
            nutrition_parts.append(f'{protein:.1f}–≥ –±–µ–ª–∫–∞')
        if fat:
            nutrition_parts.append(f'{fat:.1f}–≥ –∂–∏—Ä–æ–≤')
        if carbs:
            nutrition_parts.append(f'{carbs:.1f}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤')

        nutrition_text = ', '.join(nutrition_parts)

        await update.message.reply_text(
            f'–ë–ª—é–¥–æ: {text}, {nutrition_text}. {left_message}.',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton('–°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –∫–∞–ª–æ—Ä–∏–π?', callback_data='check_left')]
            ])
        )

    except Exception as e:
        log_detailed_error(e, "–ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è –µ–¥—ã —á–µ—Ä–µ–∑ GPT", str(user_id),
                         {"user_text": text})
        error_msg = format_error_message(e, "–ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è –µ–¥—ã", f'–í–∞—à —Ç–µ–∫—Å—Ç: "{text}"')
        await update.message.reply_text(error_msg)


async def handle_ambiguous_number(update, context, text):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–µ—Å–æ–º –∏–ª–∏ –∫–∞–ª–æ—Ä–∏—è–º–∏"""
    try:
        clean_text = text.replace(',', '.').strip()
        if clean_text.replace('.', '').isdigit():
            potential_value = float(clean_text)

            # –ï—Å–ª–∏ —á–∏—Å–ª–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–µ—Å–∞ (30-200 –∫–≥)
            if 30 <= potential_value <= 200:
                keyboard = [
                    [InlineKeyboardButton(f'‚öñÔ∏è –≠—Ç–æ –≤–µ—Å ({potential_value} –∫–≥)',
                                          callback_data=f'save_weight_{potential_value}')],
                    [InlineKeyboardButton('üçΩÔ∏è –≠—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π',
                                          callback_data=f'save_calories_{potential_value}')],
                    [InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_input')]
                ]

                await update.message.reply_text(
                    f'–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ {potential_value}. –ß—Ç–æ —ç—Ç–æ:\n'
                    f'‚Ä¢ –í–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?\n'
                    f'‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π?\n'
                    f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:',
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )

                context.user_data['pending_number'] = potential_value
                return True

    except ValueError:
        pass

    return False


async def handle_food_clarification(update, context, text, user_id, today, diary, food_log, profile):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–π –ø–æ –µ–¥–µ"""
    original_description = context.user_data.get('pending_food_description', '')
    clarification = text

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º
    description_prompt = f"""–ò—Å—Ö–æ–¥–Ω–æ–µ –±–ª—é–¥–æ: "{original_description}"
–£—Ç–æ—á–Ω–µ–Ω–∏–µ: "{clarification}"

–°–æ–∑–¥–∞–π –ü–û–õ–ù–û–ï –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –í–°–ï –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è + –¥–æ–±–∞–≤–∏–≤/–∑–∞–º–µ–Ω–∏–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏—é.

–ü—Ä–∏–º–µ—Ä:
- –ò—Å—Ö–æ–¥–Ω–æ–µ: "—Ç–≤–æ—Ä–æ–≥ —Å —á–µ–º-—Ç–æ —Å–ª–∞–¥–∫–∏–º"
- –£—Ç–æ—á–Ω–µ–Ω–∏–µ: "—Å –∞—Ä–±—É–∑–æ–º –∏ –∞—Ä–∞—Ö–∏—Å–æ–≤–æ–π –ø–∞—Å—Ç–æ–π"
- –†–µ–∑—É–ª—å—Ç–∞—Ç: "—Ç–≤–æ—Ä–æ–≥ —Å –∞—Ä–±—É–∑–æ–º –∏ –∞—Ä–∞—Ö–∏—Å–æ–≤–æ–π –ø–∞—Å—Ç–æ–π"

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º:"""

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        description_messages = [{'role': 'user', 'content': [{'type': 'text', 'text': description_prompt}]}]
        final_description = await ask_gpt(description_messages)
        logging.info(f"GPT final description: {final_description}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
        prompt = create_calorie_prompt(final_description, is_clarification=True)
        messages = [{'role': 'user', 'content': [{'type': 'text', 'text': prompt}]}]
        response = await ask_gpt(messages)

        nutrition = extract_nutrition_smart(response)
        if not nutrition['calories']:
            await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
            return

        kcal = validate_calorie_result(final_description, nutrition['calories'])
        protein = nutrition.get('protein')
        fat = nutrition.get('fat')
        carbs = nutrition.get('carbs')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        diary[today] += kcal
        save_user_diary(user_id, diary)

        if today not in food_log:
            food_log[today] = []
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã]
        food_log[today].append([final_description, kcal, protein, fat, carbs])
        save_user_food_log(user_id, food_log)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π
        burned = get_user_burned(user_id)
        left_message = get_calories_left_message(profile, diary, burned, today)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏
        nutrition_parts = [f'{kcal} –∫–∫–∞–ª']
        if protein:
            nutrition_parts.append(f'{protein:.1f}–≥ –±–µ–ª–∫–∞')
        if fat:
            nutrition_parts.append(f'{fat:.1f}–≥ –∂–∏—Ä–æ–≤')
        if carbs:
            nutrition_parts.append(f'{carbs:.1f}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤')

        nutrition_text = ', '.join(nutrition_parts)

        await update.message.reply_text(
            f'–ë–ª—é–¥–æ: {final_description}, {nutrition_text}. {left_message}.',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton('–°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –∫–∞–ª–æ—Ä–∏–π?', callback_data='check_left')]
            ])
        )

    except Exception as e:
        log_detailed_error(e, "–ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –µ–¥—ã", str(user_id),
                         {"original_description": original_description, "clarification": clarification})
        error_msg = format_error_message(e, "–ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è",
                                       f'–ò—Å—Ö–æ–¥–Ω–æ–µ: "{original_description}", –£—Ç–æ—á–Ω–µ–Ω–∏–µ: "{clarification}"')
        await update.message.reply_text(error_msg)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
    context.user_data['waiting_for_clarification'] = False
    context.user_data['pending_food_description'] = None
