# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –µ–¥—ã
"""
import base64
import os
import datetime
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–∑ main.py
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

# –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã OpenAI
import openai_safe

from utils.user_data import (
    get_user_profile, get_user_diary, save_user_diary,
    get_user_food_log, save_user_food_log, get_user_burned
)
from utils.photo_processor import analyze_food_photo
from utils.calorie_calculator import get_calories_left_message


async def handle_photo_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –µ–¥—ã"""
    user_id = str(update.effective_user.id)
    today = datetime.date.today().isoformat()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ
        file = await update.message.photo[-1].get_file()
        file_name = f'temp_{user_id}.jpg'

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        await file.download_to_drive(file_name)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        with open(file_name, 'rb') as f:
            img_b64 = base64.b64encode(f.read()).decode()

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_name)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        analyzing_msg = await update.message.reply_text('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ...')

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ GPT
        result = await analyze_food_photo(img_b64)

        if 'error' in result:
            await analyzing_msg.edit_text(
                f'‚ùå {result["error"]}\n\n–û–ø–∏—à–∏—Ç–µ –±–ª—é–¥–æ —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π.'
            )
            return

        if 'question' in result:
            # GPT –∑–∞–¥–∞–ª —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            await analyzing_msg.edit_text(result['question'])
            context.user_data['pending_photo_base64'] = img_b64
            context.user_data['waiting_for_photo_clarification'] = True
            return

        if result.get('success'):
            # –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏
            description = result['description']
            kcal = result['calories']
            protein = result.get('protein')
            fat = result.get('fat')
            carbs = result.get('carbs')

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å
            keyboard = [
                [InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm_photo')],
                [InlineKeyboardButton('‚úèÔ∏è –£—Ç–æ—á–Ω–∏—Ç—å', callback_data='edit_photo')]
            ]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–ª–Ω—ã–º–∏ –ë–ñ–£
            nutrition_parts = [f'üî• **–ö–∞–ª–æ—Ä–∏–∏:** {kcal} –∫–∫–∞–ª']
            if protein is not None:
                nutrition_parts.append(f'ü•© **–ë–µ–ª–æ–∫:** {protein:.1f} –≥')
            if fat is not None:
                nutrition_parts.append(f'üßà **–ñ–∏—Ä—ã:** {fat:.1f} –≥')
            if carbs is not None:
                nutrition_parts.append(f'üçû **–£–≥–ª–µ–≤–æ–¥—ã:** {carbs:.1f} –≥')

            nutrition_text = '\n'.join(nutrition_parts)

            await analyzing_msg.edit_text(
                f'üì∏ **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:**\n{description}\n\n{nutrition_text}\n\n–í–µ—Ä–Ω–æ?',
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            dish_data = {
                'description': description,
                'kcal': kcal,
                'protein': protein,
                'fat': fat,
                'carbs': carbs
            }

            context.user_data['pending_photo_dish'] = dish_data
            context.user_data['pending_photo_base64'] = img_b64

        else:
            await analyzing_msg.edit_text(
                '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ.\n\n–û–ø–∏—à–∏—Ç–µ –±–ª—é–¥–æ —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π.'
            )

    except Exception as e:
        logging.error(f"Error processing photo: {e}")
        await update.message.reply_text(
            f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:\n'
            f'`{str(e)}`\n\n'
            f'–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}\n'
            f'–û–ø–∏—à–∏—Ç–µ –±–ª—é–¥–æ —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.'
        )


async def handle_photo_confirmation(update, context, user_id, confirm: bool):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    today = datetime.date.today().isoformat()

    if confirm:
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞
        dish_data = context.user_data.get('pending_photo_dish', {})
        description = dish_data.get('description', '–ë–ª—é–¥–æ —Å —Ñ–æ—Ç–æ')
        kcal = dish_data.get('kcal', 0)
        protein = dish_data.get('protein')
        fat = dish_data.get('fat')
        carbs = dish_data.get('carbs')

        if kcal:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            diary = get_user_diary(user_id)
            food_log = get_user_food_log(user_id)
            profile = get_user_profile(user_id)

            diary[today] = diary.get(today, 0) + kcal
            save_user_diary(user_id, diary)

            if today not in food_log:
                food_log[today] = []
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –ø–æ–ª–Ω—ã–º–∏ –ë–ñ–£
            log_entry = [description, kcal, protein, fat, carbs]
            food_log[today].append(log_entry)
            save_user_food_log(user_id, food_log)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
            burned = get_user_burned(user_id)
            left_message = get_calories_left_message(profile, diary, burned, today)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º–∏ –ë–ñ–£
            nutrition_parts = [f'{kcal} –∫–∫–∞–ª']
            if protein:
                nutrition_parts.append(f'{protein:.1f}–≥ –±–µ–ª–∫–∞')
            if fat:
                nutrition_parts.append(f'{fat:.1f}–≥ –∂–∏—Ä–æ–≤')
            if carbs:
                nutrition_parts.append(f'{carbs:.1f}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤')

            nutrition_text = ', '.join(nutrition_parts)
            response_text = f'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {description}, {nutrition_text}. {left_message}'

            keyboard = [[InlineKeyboardButton('–°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –∫–∞–ª–æ—Ä–∏–π?', callback_data='check_left')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
        else:
            response_text = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö'
            reply_markup = None

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('pending_photo_dish', None)
        context.user_data.pop('pending_photo_base64', None)

        return response_text, reply_markup

    else:
        # –ó–∞–ø—Ä–æ—Å —É—Ç–æ—á–Ω–µ–Ω–∏—è
        context.user_data['waiting_for_photo_clarification'] = True
        return '–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ (—Ç–µ–∫—Å—Ç–æ–º):', None


async def handle_photo_clarification(update, context, user_id, clarification_text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ —Ñ–æ—Ç–æ"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å —É—á–µ—Ç–æ–º —É—Ç–æ—á–Ω–µ–Ω–∏—è
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    from .text_handler import handle_food_input

    today = datetime.date.today().isoformat()
    diary = get_user_diary(user_id)
    food_log = get_user_food_log(user_id)
    profile = get_user_profile(user_id)

    await handle_food_input(update, context, clarification_text, user_id, today, diary, food_log, profile)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
    context.user_data['waiting_for_photo_clarification'] = False
    context.user_data.pop('pending_photo_base64', None)

# –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
handle_photo = handle_photo_message
