# -*- coding: utf-8 -*-
"""
–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI - –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã
"""
import sys
import logging
import traceback
import datetime

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

def init_safe_openai():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é OpenAI"""
    try:
        logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ OpenAI")
        
        import openai
        logger.info(f"‚úÖ OpenAI –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, –≤–µ—Ä—Å–∏—è: {openai.__version__ if hasattr(openai, '__version__') else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ChatCompletion —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if hasattr(openai, 'ChatCompletion'):
            logger.info("üìã openai.ChatCompletion –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –±–ª–æ–∫–∏—Ä—É–µ–º...")
        else:
            logger.warning("‚ö†Ô∏è openai.ChatCompletion –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ChatCompletion
        class BlockedChatCompletion:
            @staticmethod
            def create(*args, **kwargs):
                error_msg = (
                    "–ò–°–ü–†–ê–í–õ–ï–ù–û: openai.ChatCompletion.create –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AsyncOpenAI().chat.completions.create() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ.\n"
                    f"–í—ã–∑–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ {datetime.datetime.now()}"
                )
                logger.error(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤—ã–∑–æ–≤ ChatCompletion.create —Å args={args}, kwargs={kwargs}")
                logger.error(f"üìç Traceback –≤—ã–∑–æ–≤–∞:\n{traceback.format_stack()}")
                raise RuntimeError(error_msg)
            
            @staticmethod
            def acreate(*args, **kwargs):
                error_msg = (
                    "–ò–°–ü–†–ê–í–õ–ï–ù–û: openai.ChatCompletion.acreate –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!\n" 
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AsyncOpenAI().chat.completions.create() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ.\n"
                    f"–í—ã–∑–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ {datetime.datetime.now()}"
                )
                logger.error(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤—ã–∑–æ–≤ ChatCompletion.acreate —Å args={args}, kwargs={kwargs}")
                logger.error(f"üìç Traceback –≤—ã–∑–æ–≤–∞:\n{traceback.format_stack()}")
                raise RuntimeError(error_msg)
        
        # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ ChatCompletion, –æ—Å—Ç–∞–≤–ª—è—è –æ—Å—Ç–∞–ª—å–Ω–æ–π –º–æ–¥—É–ª—å –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º
        original_chatcompletion = getattr(openai, 'ChatCompletion', None)
        openai.ChatCompletion = BlockedChatCompletion
        
        logger.info("üîß OpenAI ChatCompletion –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ—Å—Ç–∞–ª—å–Ω–æ–π –º–æ–¥—É–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
        try:
            openai.ChatCompletion.create()
            logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ ChatCompletion.create –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return False
        except RuntimeError as e:
            if "–ò–°–ü–†–ê–í–õ–ï–ù–û" in str(e):
                logger.info("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ ChatCompletion.create —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                logger.warning(f"‚ö†Ô∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–æ–π: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        openai._safe_blocked = True
        openai._safe_blocked_at = datetime.datetime.now()
        openai._original_chatcompletion = original_chatcompletion
        
        logger.info("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è OpenAI library –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ OpenAI ChatCompletion: {e}")
        logger.error(f"üìç –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        return False

def check_openai_safety():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ OpenAI –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"""
    try:
        import openai
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if hasattr(openai, '_safe_blocked') and openai._safe_blocked:
            logger.info(f"‚úÖ OpenAI –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å {openai._safe_blocked_at}")
            return True
        else:
            logger.warning("‚ö†Ô∏è OpenAI –Ω–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π")
            return False
            
    except ImportError:
        logger.warning("OpenAI library –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ OpenAI: {e}")
        return False

def get_openai_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å OpenAI –º–æ–¥—É–ª—è"""
    try:
        import openai
        
        status = {
            'imported': True,
            'version': getattr(openai, '__version__', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            'has_chatcompletion': hasattr(openai, 'ChatCompletion'),
            'is_blocked': getattr(openai, '_safe_blocked', False),
            'blocked_at': getattr(openai, '_safe_blocked_at', None)
        }
        
        return status
        
    except ImportError:
        return {'imported': False, 'error': 'OpenAI library –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}
    except Exception as e:
        return {'imported': False, 'error': str(e)}

# –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
logger.info("üöÄ –ú–æ–¥—É–ª—å openai_safe –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
init_result = init_safe_openai()

if init_result:
    logger.info("üéâ –ú–æ–¥—É–ª—å openai_safe –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
else:
    logger.error("üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è openai_safe")
