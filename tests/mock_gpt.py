#!/usr/bin/env python3
"""
–ú–æ–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤ –∫ GPT
"""

import re
from typing import Dict, Any, List
from unittest.mock import patch, MagicMock


class MockGPTResponses:
    """–ö–ª–∞—Å—Å —Å –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ GPT –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –¢–∏–ø–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã GPT –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    PHOTO_RESPONSES = {
        "—Ç–≤–æ—Ä–æ–≥_–±–∞–Ω–∞–Ω": """–¢–≤–æ—Ä–æ–≥ —Å –Ω–∞—Ä–µ–∑–∞–Ω–Ω—ã–º –±–∞–Ω–∞–Ω–æ–º –∏ –∞—Ä–∞—Ö–∏—Å–æ–≤–æ–π –ø–∞—Å—Ç–æ–π.

–†–∞—Å—á–µ—Ç:
- –¢–≤–æ—Ä–æ–≥ 9% 150–≥: 160*1.5 = 240 –∫–∫–∞–ª, 16*1.5 = 24–≥ –±–µ–ª–∫–∞, 9*1.5 = 13.5–≥ –∂–∏—Ä–∞, 2*1.5 = 3–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤
- –ë–∞–Ω–∞–Ω —Å—Ä–µ–¥–Ω–∏–π 100–≥: 90 –∫–∫–∞–ª, 1.5–≥ –±–µ–ª–∫–∞, 0.3–≥ –∂–∏—Ä–∞, 23–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤  
- –ê—Ä–∞—Ö–∏—Å–æ–≤–∞—è –ø–∞—Å—Ç–∞ ~20–≥: 600*0.2 = 120 –∫–∫–∞–ª, 25*0.2 = 5–≥ –±–µ–ª–∫–∞, 50*0.2 = 10–≥ –∂–∏—Ä–∞, 20*0.2 = 4–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤

–ò—Ç–æ–≥–æ: 450 –∫–∫–∞–ª, 30.5 –≥ –±–µ–ª–∫–∞, 23.8 –≥ –∂–∏—Ä–æ–≤, 30 –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤""",

        "–æ–º–ª–µ—Ç": """–û–º–ª–µ—Ç –∏–∑ –¥–≤—É—Ö —è–∏—Ü —Å —Å—ã—Ä–æ–º –∏ –ø–æ–º–∏–¥–æ—Ä–∞–º–∏.

–†–∞—Å—á–µ—Ç:
- –Ø–π—Ü–∞ 2 —à—Ç (120–≥): 155 –∫–∫–∞–ª, 12–≥ –±–µ–ª–∫–∞, 11–≥ –∂–∏—Ä–∞, 1–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤
- –°—ã—Ä 30–≥: 110 –∫–∫–∞–ª, 7–≥ –±–µ–ª–∫–∞, 9–≥ –∂–∏—Ä–∞, 0–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤  
- –ü–æ–º–∏–¥–æ—Ä 50–≥: 10 –∫–∫–∞–ª, 0.5–≥ –±–µ–ª–∫–∞, 0–≥ –∂–∏—Ä–∞, 2–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤
- –ú–∞—Å–ª–æ –¥–ª—è –∂–∞—Ä–∫–∏: 50 –∫–∫–∞–ª, 0–≥ –±–µ–ª–∫–∞, 6–≥ –∂–∏—Ä–∞, 0–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤

–ò—Ç–æ–≥–æ: 325 –∫–∫–∞–ª, 19.5 –≥ –±–µ–ª–∫–∞, 26 –≥ –∂–∏—Ä–æ–≤, 3 –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤""",

        "—Å–∞–ª–∞—Ç_–∫—É—Ä–∏—Ü–∞": """–°–∞–ª–∞—Ç —Å –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–æ–π, –æ–≤–æ—â–∞–º–∏ –∏ –∑–∞–ø—Ä–∞–≤–∫–æ–π.

–†–∞—Å—á–µ—Ç:
- –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ 100–≥: 165 –∫–∫–∞–ª, 31–≥ –±–µ–ª–∫–∞, 3.6–≥ –∂–∏—Ä–∞, 0–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤
- –õ–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞ 50–≥: 8 –∫–∫–∞–ª, 0.7–≥ –±–µ–ª–∫–∞, 0–≥ –∂–∏—Ä–∞, 1.5–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤
- –û–≥—É—Ä—Ü—ã 80–≥: 13 –∫–∫–∞–ª, 0.6–≥ –±–µ–ª–∫–∞, 0–≥ –∂–∏—Ä–∞, 3–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤
- –ü–æ–º–∏–¥–æ—Ä—ã 60–≥: 11 –∫–∫–∞–ª, 0.5–≥ –±–µ–ª–∫–∞, 0–≥ –∂–∏—Ä–∞, 2.4–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤  
- –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ 1 —Å—Ç.–ª.: 120 –∫–∫–∞–ª, 0–≥ –±–µ–ª–∫–∞, 14–≥ –∂–∏—Ä–∞, 0–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤

–ò—Ç–æ–≥–æ: 317 –∫–∫–∞–ª, 32.8 –≥ –±–µ–ª–∫–∞, 17.6 –≥ –∂–∏—Ä–æ–≤, 6.9 –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤""",

        "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π_–æ—Ç–≤–µ—Ç": """–ù–∞ —Ñ–æ—Ç–æ —Ç–≤–æ—Ä–æ–≥ —Å –±–∞–Ω–∞–Ω–æ–º. –ö–∞–ª–æ—Ä–∏–∏: 159 –∫–∫–∞–ª, –±–µ–ª–∫–∏: 32.5–≥, –∂–∏—Ä—ã: 26.4–≥, —É–≥–ª–µ–≤–æ–¥—ã: 29.2–≥""",
    }
    
    # –û—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ –µ–¥–µ
    TEXT_RESPONSES = {
        "–≥—Ä–µ—á–∫–∞ –∫–æ—Ç–ª–µ—Ç–∞": "–ì—Ä–µ—á–Ω–µ–≤–∞—è –∫–∞—à–∞ —Å –º—è—Å–Ω–æ–π –∫–æ—Ç–ª–µ—Ç–æ–π. –ò—Ç–æ–≥–æ: 480 –∫–∫–∞–ª, 35 –≥ –±–µ–ª–∫–∞, 16 –≥ –∂–∏—Ä–æ–≤, 45 –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤",
        "–±–æ—Ä—â": "–ë–æ—Ä—â —Å –º—è—Å–æ–º –∏ —Å–º–µ—Ç–∞–Ω–æ–π. –í—Å–µ–≥–æ: 350 –∫–∫–∞–ª, 25 –≥ –±–µ–ª–∫–∞, 10 –≥ –∂–∏—Ä–æ–≤, 20 –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤", 
        "—Ä–∏—Å –∫—É—Ä–∏—Ü–∞": "–†–∏—Å –æ—Ç–≤–∞—Ä–Ω–æ–π —Å –∫—É—Ä–∏–Ω—ã–º —Ñ–∏–ª–µ –∏ –æ–≤–æ—â–∞–º–∏. –ö–∞–ª–æ—Ä–∏–∏: 420, –±–µ–ª–æ–∫: 32–≥, –∂–∏—Ä—ã: 8–≥, —É–≥–ª–µ–≤–æ–¥—ã: 55–≥"
    }


def mock_gpt_analyze_photo(image_base64: str) -> Dict[str, Any]:
    """
    –ú–æ–∫ –¥–ª—è analyze_food_photo –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
    """
    # –≠–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ª—É—á–∞–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ "—Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ" –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if "error" in image_base64:
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"}
    
    if "question" in image_base64:
        return {"question": "–ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏?"}
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–≤–æ—Ä–æ–≥–∞ —Å –±–∞–Ω–∞–Ω–æ–º
    response = MockGPTResponses.PHOTO_RESPONSES["—Ç–≤–æ—Ä–æ–≥_–±–∞–Ω–∞–Ω"]
    
    return {
        "description": "–¢–≤–æ—Ä–æ–≥ —Å –±–∞–Ω–∞–Ω–æ–º –∏ –∞—Ä–∞—Ö–∏—Å–æ–≤–æ–π –ø–∞—Å—Ç–æ–π",
        "calories": 450,
        "protein": 30.5,
        "fat": 23.8, 
        "carbs": 30.0,
        "success": True
    }


def mock_ask_gpt(messages: List[Dict]) -> str:
    """
    –ú–æ–∫ –¥–ª—è ask_gpt –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
    """
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —á—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è
    if messages and len(messages) > 0:
        content = str(messages[0].get('content', ''))
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ (–µ—Å—Ç—å image_url)
        if isinstance(messages[0].get('content'), list):
            for item in messages[0]['content']:
                if item.get('type') == 'image_url':
                    return MockGPTResponses.PHOTO_RESPONSES["—Ç–≤–æ—Ä–æ–≥_–±–∞–Ω–∞–Ω"]
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        content_lower = content.lower()
        if '–≥—Ä–µ—á–∫–∞' in content_lower and '–∫–æ—Ç–ª–µ—Ç–∞' in content_lower:
            return MockGPTResponses.TEXT_RESPONSES["–≥—Ä–µ—á–∫–∞ –∫–æ—Ç–ª–µ—Ç–∞"]
        elif '–±–æ—Ä—â' in content_lower:
            return MockGPTResponses.TEXT_RESPONSES["–±–æ—Ä—â"]
        elif '—Ä–∏—Å' in content_lower and '–∫—É—Ä–∏—Ü–∞' in content_lower:
            return MockGPTResponses.TEXT_RESPONSES["—Ä–∏—Å –∫—É—Ä–∏—Ü–∞"]
    
    # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    return "–¢–µ—Å—Ç–æ–≤–æ–µ –±–ª—é–¥–æ. –ò—Ç–æ–≥–æ: 300 –∫–∫–∞–ª, 20 –≥ –±–µ–ª–∫–∞, 10 –≥ –∂–∏—Ä–æ–≤, 25 –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤"


class MockGPTContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥–º–µ–Ω—ã GPT –≤—ã–∑–æ–≤–æ–≤ –≤ —Ç–µ—Å—Ç–∞—Ö"""
    
    def __init__(self, photo_response_key: str = "—Ç–≤–æ—Ä–æ–≥_–±–∞–Ω–∞–Ω"):
        self.photo_response_key = photo_response_key
        self.patches = []
    
    def __enter__(self):
        # –ü–∞—Ç—á–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑—ã–≤–∞—é—Ç GPT
        from unittest.mock import patch
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–∫ –¥–ª—è ask_gpt
        ask_gpt_patch = patch('utils.calorie_calculator.ask_gpt', side_effect=mock_ask_gpt)
        self.patches.append(ask_gpt_patch)
        ask_gpt_patch.start()
        
        # –ú–æ–∫ –¥–ª—è analyze_food_photo
        photo_patch = patch('utils.photo_processor.ask_gpt', side_effect=mock_ask_gpt)  
        self.patches.append(photo_patch)
        photo_patch.start()
        
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–∞—Ç—á–∏
        for patch_obj in self.patches:
            patch_obj.stop()


# –£–¥–æ–±–Ω—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
def with_mock_gpt(photo_response: str = "—Ç–≤–æ—Ä–æ–≥_–±–∞–Ω–∞–Ω"):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º GPT
    
    Usage:
    @with_mock_gpt("–æ–º–ª–µ—Ç")  
    def test_something():
        ...
    """
    def decorator(func):
        def wrapper(*args, **kwargs):
            with MockGPTContext(photo_response):
                return func(*args, **kwargs)
        return wrapper
    return decorator


def get_mock_response(key: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –º–æ–∫-–æ—Ç–≤–µ—Ç –ø–æ –∫–ª—é—á—É"""
    return MockGPTResponses.PHOTO_RESPONSES.get(key) or MockGPTResponses.TEXT_RESPONSES.get(key, "")


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –º–æ–∫–æ–≤
    print("üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–∫-–æ—Ç–≤–µ—Ç–æ–≤ GPT:")
    print()
    
    print("üì∏ –§–æ—Ç–æ —Ç–≤–æ—Ä–æ–≥–∞ —Å –±–∞–Ω–∞–Ω–æ–º:")
    print(MockGPTResponses.PHOTO_RESPONSES["—Ç–≤–æ—Ä–æ–≥_–±–∞–Ω–∞–Ω"])
    print()
    
    print("üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")
    print(mock_ask_gpt([{"content": "–°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –≤ –≥—Ä–µ—á–∫–µ —Å –∫–æ—Ç–ª–µ—Ç–æ–π?"}]))
    print()
    
    print("‚úÖ –ú–æ–∫–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
