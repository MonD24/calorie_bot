#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è CI/CD –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


def test_bju_extraction_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ë–ñ–£"""
    from utils.calorie_calculator import extract_nutrition_smart
    
    test_cases = [
        ("–¢–≤–æ—Ä–æ–≥ 450 –∫–∫–∞–ª, 30–≥ –±–µ–ª–∫–∞, 15–≥ –∂–∏—Ä–∞, 25–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤", 450, 30, 15, 25),
        ("–°–∞–ª–∞—Ç: 320 –∫–∫–∞–ª, –±–µ–ª–∫–∏ 28–≥, –∂–∏—Ä—ã 12–≥, —É–≥–ª–µ–≤–æ–¥—ã 8–≥", 320, 28, 12, 8),
        ("–ö–∞–ª–æ—Ä–∏–∏: 280, –±–µ–ª–æ–∫: 22–≥, –∂–∏—Ä—ã: 18–≥, —É–≥–ª–µ–≤–æ–¥—ã: 6–≥", 280, 22, 18, 6),
    ]
    
    passed = 0
    for text, exp_cal, exp_prot, exp_fat, exp_carb in test_cases:
        nutrition = extract_nutrition_smart(text)
        
        if (nutrition['calories'] == exp_cal and 
            nutrition['protein'] == exp_prot and
            nutrition['fat'] == exp_fat and 
            nutrition['carbs'] == exp_carb):
            passed += 1
        else:
            print(f"‚ùå –ù–µ –ø—Ä–æ—à–µ–ª: {text}")
            print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {exp_cal}, {exp_prot}, {exp_fat}, {exp_carb}")
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {nutrition['calories']}, {nutrition['protein']}, {nutrition['fat']}, {nutrition['carbs']}")
    
    return passed == len(test_cases)


def test_nutrition_validation_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    from utils.nutrition_validator import validate_nutrition_data
    
    # –¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –∫–∞–ª–æ—Ä–∏–π
    nutrition = {"calories": 159, "protein": 32.5, "fat": 26.4, "carbs": 29.2}
    validated = validate_nutrition_data(nutrition, "–¢–≤–æ—Ä–æ–≥")
    
    # –ö–∞–ª–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ë–ñ–£
    return validated['calories'] > 400


def test_imports():
    """–¢–µ—Å—Ç —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è"""
    try:
        from utils.calorie_calculator import extract_nutrition_smart
        from utils.nutrition_validator import validate_nutrition_data
        from utils.photo_processor import analyze_food_photo
        from handlers.commands import help_command
        from data.calorie_database import CALORIE_DATABASE
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False


def test_mock_responses():
    """–¢–µ—Å—Ç –º–æ–∫-–æ—Ç–≤–µ—Ç–æ–≤"""
    try:
        from tests.mock_gpt import MockGPTResponses, mock_ask_gpt
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –¥–∞–Ω–Ω—ã–µ
        response = MockGPTResponses.PHOTO_RESPONSES["—Ç–≤–æ—Ä–æ–≥_–±–∞–Ω–∞–Ω"]
        if "450 –∫–∫–∞–ª" not in response:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∫ —Ñ—É–Ω–∫—Ü–∏—é
        result = mock_ask_gpt([{"content": "–≥—Ä–µ—á–∫–∞ —Å –∫–æ—Ç–ª–µ—Ç–æ–π"}])
        if "480 –∫–∫–∞–ª" not in result:
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–∫–æ–≤: {e}")
        return False


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    tests = [
        (test_imports, "–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π"),
        (test_bju_extraction_simple, "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ë–ñ–£"),
        (test_nutrition_validation_simple, "–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∏—Ç–∞–Ω–∏—è"),
        (test_mock_responses, "–ú–æ–∫-–æ—Ç–≤–µ—Ç—ã GPT"),
    ]
    
    print("üß™ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è CI/CD:\n")
    
    passed = 0
    total = len(tests)
    
    for test_func, test_name in tests:
        try:
            if test_func():
                print(f"‚úÖ {test_name}")
                passed += 1
            else:
                print(f"‚ùå {test_name}: —Ç–µ—Å—Ç –≤–µ—Ä–Ω—É–ª False")
        except Exception as e:
            print(f"‚ùå {test_name}: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω—ã!")
        return True
    else:
        print("üîß –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –Ω—É–∂–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
