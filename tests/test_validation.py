#!/usr/bin/env python3
"""
Pytest-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∏—Ç–∞–Ω–∏—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    import pytest
except ImportError:
    pytest = None

from utils.nutrition_validator import validate_nutrition_data, estimate_portion_calories
from tests.mock_gpt import MockGPTContext, with_mock_gpt


class TestNutritionValidation:
    """–¢–µ—Å—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def test_calorie_correction_from_bju(self):
        """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ë–ñ–£"""
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏, –Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ë–ñ–£
        nutrition = {"calories": 159, "protein": 32.5, "fat": 26.4, "carbs": 29.2}
        validated = validate_nutrition_data(nutrition, "–¢–≤–æ—Ä–æ–≥ —Å –±–∞–Ω–∞–Ω–æ–º")
        
        # –ö–∞–ª–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã: 32.5*4 + 26.4*9 + 29.2*4 ‚âà 484
        assert validated['calories'] > 400
        assert validated['protein'] == 32.5  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–µ–Ω—è—é—Ç—Å—è
        
    def test_no_correction_for_valid_data(self):
        """–¢–µ—Å—Ç —á—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è"""
        nutrition = {"calories": 450, "protein": 31.5, "fat": 23.8, "carbs": 31.5}
        validated = validate_nutrition_data(nutrition, "–¢–≤–æ—Ä–æ–≥ —Å –±–∞–Ω–∞–Ω–æ–º")
        
        assert validated == nutrition  # –î–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
    
    def test_minimum_values_correction(self):
        """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        nutrition = {"calories": 100, "protein": 0.0, "fat": 0.0, "carbs": 0.0}
        validated = validate_nutrition_data(nutrition, "–¢–µ—Å—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –±–æ–ª—å—à–µ –Ω—É–ª—è (—Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è)
        assert validated['protein'] > 0     # –ú–∏–Ω–∏–º—É–º –¥–ª—è –±–µ–ª–∫–∞
        assert validated['fat'] > 0         # –ú–∏–Ω–∏–º—É–º –¥–ª—è –∂–∏—Ä–∞  
        assert validated['carbs'] > 0       # –ú–∏–Ω–∏–º—É–º –¥–ª—è —É–≥–ª–µ–≤–æ–¥–æ–≤
    
    def test_portion_estimation(self):
        """–¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ü–∏–π"""
        # –¢–≤–æ—Ä–æ–≥ —Å –±–∞–Ω–∞–Ω–æ–º –¥–æ–ª–∂–µ–Ω –¥–∞–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é –æ—Ü–µ–Ω–∫—É
        estimated = estimate_portion_calories("—Ç–≤–æ—Ä–æ–≥ —Å –±–∞–Ω–∞–Ω–æ–º")
        assert estimated is not None
        assert estimated > 0  # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –æ—Ü–µ–Ω–∫–∞
        
        # –°–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π
        estimated = estimate_portion_calories("—Å–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π –∏ –æ–≤–æ—â–∞–º–∏")
        assert estimated is not None
        assert estimated > 0
    
    def test_unknown_food_estimation(self):
        """–¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –µ–¥—ã"""
        estimated = estimate_portion_calories("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ xyz")
        assert estimated is None or estimated == 0


class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    
    def test_full_pipeline(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ + –≤–∞–ª–∏–¥–∞—Ü–∏—è"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π GPT
        with MockGPTContext():
            from utils.calorie_calculator import extract_nutrition_smart
            
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç GPT (—Ç–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é)
            gpt_response = "–¢–≤–æ—Ä–æ–≥ 159 –∫–∫–∞–ª, 32.5–≥ –±–µ–ª–∫–∞, 26.4–≥ –∂–∏—Ä–∞, 29.2–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            nutrition = extract_nutrition_smart(gpt_response)
            assert nutrition['calories'] == 159
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º
            validated = validate_nutrition_data(nutrition, "–¢–≤–æ—Ä–æ–≥")
            assert validated['calories'] > 400  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    
    def test_import_integrity(self):
        """–¢–µ—Å—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        try:
            from utils.calorie_calculator import extract_nutrition_smart
            from utils.photo_processor import analyze_food_photo
            from handlers.commands import help_command
            from data.calorie_database import CALORIE_DATABASE
            assert True  # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
        except ImportError as e:
            assert False, f"Import error: {e}"


def run_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ pytest"""
    test_validation = TestNutritionValidation()
    test_integration = TestIntegration()
    
    tests = [
        (test_validation.test_calorie_correction_from_bju, "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∫–∞–ª–æ—Ä–∏–π"),
        (test_validation.test_no_correction_for_valid_data, "–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"),
        (test_validation.test_minimum_values_correction, "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"),
        (test_validation.test_portion_estimation, "–û—Ü–µ–Ω–∫–∞ –ø–æ—Ä—Ü–∏–π"),
        (test_validation.test_unknown_food_estimation, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –µ–¥–∞"),
        (test_integration.test_full_pipeline, "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª"),
        (test_integration.test_import_integrity, "–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–æ–≤"),
    ]
    
    passed = 0
    failed = 0
    
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n")
    
    for test_func, test_name in tests:
        try:
            test_func()
            print(f"‚úÖ {test_name}")
            passed += 1
        except Exception as e:
            print(f"‚ùå {test_name}: {e}")
            failed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed} –ø—Ä–æ—à–ª–∏, {failed} —É–ø–∞–ª–∏")
    return failed == 0


if __name__ == "__main__":
    if pytest:
        pytest.main([__file__, "-v"])
    else:
        success = run_tests()
        sys.exit(0 if success else 1)
