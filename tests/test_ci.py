#!/usr/bin/env python3
"""
–ù–∞–¥–µ–∂–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è CI/CD - –ø—Ä–æ—Å—Ç—ã–µ –∏ –±—ã—Å—Ç—Ä—ã–µ
"""

import sys
import os
import re
from typing import Dict, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


def extract_calories_test(text: str) -> Optional[int]:
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    patterns = [
        r'(\d+)\s*–∫–∫–∞–ª',
        r'–∫–∞–ª–æ—Ä–∏[–π—è–µ]:\s*(\d+)',
        r'–≤—Å–µ–≥–æ\s+(\d+)',
        r'–∏—Ç–æ–≥–æ:?\s*(\d+)',
        r'–∫–∞–ª–æ—Ä–∏–∏:\s*(\d+)',  # –î–æ–±–∞–≤–∏–ª–∏ —ç—Ç–æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            return int(match.group(1))
    return None


def extract_protein_test(text: str) -> Optional[float]:
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–µ–ª–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    patterns = [
        r'(\d+(?:\.\d+)?)\s*–≥\s*–±–µ–ª–∫–∞',
        r'–±–µ–ª–∫[–∞-—è]*:?\s*(\d+(?:\.\d+)?)',
        r'–±:?\s*(\d+(?:\.\d+)?)',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            return float(match.group(1))
    return None


def test_basic_extraction():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–µ–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π"""
    test_cases = [
        ("450 –∫–∫–∞–ª, 30–≥ –±–µ–ª–∫–∞", 450, 30.0),
        ("–ö–∞–ª–æ—Ä–∏–∏: 320, –±–µ–ª–∫–∏: 28–≥", 320, 28.0),
        ("–ò—Ç–æ–≥–æ 280 –∫–∫–∞–ª, –±: 22–≥", 280, 22.0),
        ("–í—Å–µ–≥–æ 350 –∫–∞–ª–æ—Ä–∏–π, 25–≥ –±–µ–ª–∫–∞", 350, 25.0)
    ]
    
    failed = []
    
    for text, exp_cal, exp_prot in test_cases:
        cal = extract_calories_test(text)
        prot = extract_protein_test(text)
        
        if cal != exp_cal:
            failed.append(f"–ö–∞–ª–æ—Ä–∏–∏: '{text}' -> {cal}, –æ–∂–∏–¥–∞–ª–æ—Å—å {exp_cal}")
        
        if prot != exp_prot:
            failed.append(f"–ë–µ–ª–∫–∏: '{text}' -> {prot}, –æ–∂–∏–¥–∞–ª–æ—Å—å {exp_prot}")
    
    return len(failed) == 0, failed


def test_regex_patterns():
    """–¢–µ—Å—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
    tests = [
        (r'\d+\s*–∫–∫–∞–ª', "450 –∫–∫–∞–ª", True),
        (r'\d+\s*–≥\s*–±–µ–ª–∫–∞', "30–≥ –±–µ–ª–∫–∞", True),
        (r'–±:\s*\d+', "–±: 35", True),
        (r'\d+\s*–∫–∫–∞–ª', "no calories here", False)
    ]
    
    failed = []
    
    for pattern, text, should_match in tests:
        matches = bool(re.search(pattern, text, re.IGNORECASE))
        if matches != should_match:
            failed.append(f"–ü–∞—Ç—Ç–µ—Ä–Ω '{pattern}' –≤ '{text}': {matches}, –æ–∂–∏–¥–∞–ª–æ—Å—å {should_match}")
    
    return len(failed) == 0, failed


def test_file_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    required_files = [
        "calorie_bot_modular.py",
        "config.py", 
        "requirements.txt",
        "utils/calorie_calculator.py",
        "handlers/commands.py",
        "data/calorie_database.py"
    ]
    
    missing = []
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    
    for file_path in required_files:
        full_path = os.path.join(project_root, file_path)
        if not os.path.exists(full_path):
            missing.append(file_path)
    
    return len(missing) == 0, missing


def test_python_syntax():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤"""
    import py_compile
    
    python_files = [
        "calorie_bot_modular.py", 
        "config.py"
    ]
    
    failed = []
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    
    for file_path in python_files:
        full_path = os.path.join(project_root, file_path)
        if os.path.exists(full_path):
            try:
                py_compile.compile(full_path, doraise=True)
            except Exception as e:
                failed.append(f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {file_path}: {e}")
        else:
            failed.append(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    return len(failed) == 0, failed


def test_config_validation():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π"""
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    config_path = os.path.join(project_root, "config.py")
    
    if not os.path.exists(config_path):
        return False, ["config.py –Ω–µ –Ω–∞–π–¥–µ–Ω"]
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        required_vars = ['TELEGRAM_BOT_TOKEN', 'OPENAI_API_KEY']
        missing = []
        
        for var in required_vars:
            if var not in content:
                missing.append(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ config.py")
        
        return len(missing) == 0, missing
        
    except Exception as e:
        return False, [f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è config.py: {e}"]


def test_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt"""
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    req_path = os.path.join(project_root, "requirements.txt")
    
    if not os.path.exists(req_path):
        return False, ["requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"]
    
    try:
        with open(req_path, 'r', encoding='utf-8') as f:
            content = f.read().lower()
        
        required_packages = ['python-telegram-bot', 'openai']
        missing = []
        
        for package in required_packages:
            if package not in content:
                missing.append(f"–ü–∞–∫–µ—Ç {package} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ requirements.txt")
        
        return len(missing) == 0, missing
        
    except Exception as e:
        return False, [f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è requirements.txt: {e}"]


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    tests = [
        (test_basic_extraction, "–ë–∞–∑–æ–≤–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"),
        (test_regex_patterns, "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"),
        (test_file_structure, "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞"),
        (test_python_syntax, "–°–∏–Ω—Ç–∞–∫—Å–∏—Å Python"),
        (test_config_validation, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"),
        (test_requirements, "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    ]
    
    print("üß™ CI/CD Tests - Simple & Reliable\n")
    print("=" * 50)
    
    total_tests = len(tests)
    passed_tests = 0
    all_errors = []
    
    for test_func, test_name in tests:
        try:
            success, errors = test_func()
            
            if success:
                print(f"‚úÖ {test_name}")
                passed_tests += 1
            else:
                print(f"‚ùå {test_name}")
                for error in errors:
                    print(f"   ‚Ä¢ {error}")
                    all_errors.append(f"{test_name}: {error}")
                    
        except Exception as e:
            print(f"üí• {test_name}: CRASH - {e}")
            all_errors.append(f"{test_name}: Exception - {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä Results: {passed_tests}/{total_tests} tests passed")
    
    if passed_tests == total_tests:
        print("üéâ All tests PASSED! Ready for deployment.")
        return True
    else:
        print(f"üîß {total_tests - passed_tests} tests FAILED")
        print("\nüí° Quick fix suggestions:")
        for error in all_errors[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
            print(f"   ‚Ä¢ {error}")
        return False


if __name__ == "__main__":
    success = run_all_tests()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è CI/CD
    exit_code = 0 if success else 1
    
    print(f"\nüöÄ Exit code: {exit_code}")
    sys.exit(exit_code)
