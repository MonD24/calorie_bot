#!/usr/bin/env python3
"""
–°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä—ã–µ smoke tests - –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
"""

import sys
import os
import re


def test_smoke_regex():
    """–î—ã–º–æ–≤–æ–π —Ç–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–≥—É–ª—è—Ä–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç"""
    
    # –¢–µ—Å—Ç –∫–∞–ª–æ—Ä–∏–π
    text = "–¢–≤–æ—Ä–æ–≥ 450 –∫–∫–∞–ª —Å –±–∞–Ω–∞–Ω–æ–º"
    cal_match = re.search(r'(\d+)\s*–∫–∫–∞–ª', text)
    assert cal_match and int(cal_match.group(1)) == 450, "–ö–∞–ª–æ—Ä–∏–∏ –Ω–µ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è"
    
    # –¢–µ—Å—Ç –±–µ–ª–∫–∞
    text = "30–≥ –±–µ–ª–∫–∞"
    prot_match = re.search(r'(\d+)–≥?\s*–±–µ–ª–∫–∞', text)
    assert prot_match and int(prot_match.group(1)) == 30, "–ë–µ–ª–∫–∏ –Ω–µ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è"
    
    # –¢–µ—Å—Ç –∂–∏—Ä–æ–≤
    text = "15–≥ –∂–∏—Ä–æ–≤"
    fat_match = re.search(r'(\d+)–≥?\s*–∂–∏—Ä–æ–≤?', text)
    assert fat_match and int(fat_match.group(1)) == 15, "–ñ–∏—Ä—ã –Ω–µ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è"


def test_smoke_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    required = ['calorie_bot_modular.py', 'config.py', 'requirements.txt']
    
    for filename in required:
        filepath = os.path.join(os.path.dirname(os.path.dirname(__file__)), filename)
        assert os.path.exists(filepath), f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: {filename}"


def test_smoke_imports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        import json
        import re
        import os
        import sys
    except Exception as e:
        raise AssertionError(f"–ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç: {e}")


def test_smoke_nutrition_logic():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –ø–æ –ë–ñ–£"""
    
    # –§–æ—Ä–º—É–ª–∞: –±–µ–ª–∫–∏*4 + –∂–∏—Ä—ã*9 + —É–≥–ª–µ–≤–æ–¥—ã*4
    protein, fat, carbs = 30, 15, 25
    expected_calories = protein * 4 + fat * 9 + carbs * 4  # 30*4 + 15*9 + 25*4 = 120 + 135 + 100 = 355
    
    assert expected_calories == 355, f"–†–∞—Å—á–µ—Ç –ë–ñ–£ –Ω–µ–≤–µ—Ä–µ–Ω: {expected_calories}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ–ª—å—à–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è
    claimed_calories = 100  # –°–∏–ª—å–Ω–æ –∑–∞–Ω–∏–∂–µ–Ω–æ
    deviation = abs(claimed_calories - expected_calories) / expected_calories
    
    assert deviation > 0.3, "–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"


def run_smoke_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥—ã–º–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ (–¥–ª—è backward compatibility)"""
    
    tests = [
        (test_smoke_regex, "RegEx extraction"),
        (test_smoke_files, "File structure"), 
        (test_smoke_imports, "Basic imports"),
        (test_smoke_nutrition_logic, "BJU calculation logic")
    ]
    
    print("üí® Smoke Tests - Ultra Fast")
    print("=" * 30)
    
    for i, (test_func, name) in enumerate(tests, 1):
        try:
            test_func()
            print(f"‚úÖ {i}. {name}")
        except Exception as e:
            print(f"‚ùå {i}. {name}: {e}")
            return False
    
    print("=" * 30)
    print("üöÄ All smoke tests PASSED!")
    return True


if __name__ == "__main__":
    success = run_smoke_tests()
    
    if not success:
        print("üí• SMOKE TEST FAILURE - Critical issues detected!")
        sys.exit(1)
    else:
        print("‚ú® Ready to go!")
        sys.exit(0)
