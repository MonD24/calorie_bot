#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –µ–¥—ã (—Å –º–æ–∫–∞–º–∏ GPT)
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    import pytest
except ImportError:
    pytest = None

import asyncio
from unittest.mock import patch, MagicMock
from tests.mock_gpt import MockGPTContext, mock_gpt_analyze_photo, mock_ask_gpt


class TestPhotoAnalysis:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –µ–¥—ã"""
    
    def test_photo_analysis_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ GPT
        result = mock_gpt_analyze_photo("test_image_data")
        
        assert result['success'] is True
        assert result['calories'] == 450
        assert result['protein'] == 30.5
        assert result['fat'] == 23.8
        assert result['carbs'] == 30.0
        assert 'description' in result
    
    def test_photo_analysis_error(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ"""
        result = mock_gpt_analyze_photo("error_image_data")
        
        assert 'error' in result
        assert result['error'] == "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    
    def test_photo_analysis_question(self):
        """–¢–µ—Å—Ç –∫–æ–≥–¥–∞ GPT –∑–∞–¥–∞–µ—Ç —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å"""
        result = mock_gpt_analyze_photo("question_image_data")
        
        assert 'question' in result
        assert result['question'] == "–ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏?"


class TestPhotoProcessorIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è photo_processor"""
    
    def test_extract_nutrition_from_response(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞ GPT"""
        from utils.calorie_calculator import extract_nutrition_smart
        from tests.mock_gpt import MockGPTResponses
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –º–æ–∫-–æ—Ç–≤–µ—Ç–æ–º
        response = MockGPTResponses.PHOTO_RESPONSES["—Ç–≤–æ—Ä–æ–≥_–±–∞–Ω–∞–Ω"]
        nutrition = extract_nutrition_smart(response)
        
        assert nutrition['calories'] == 450
        assert nutrition['protein'] == 30.5
        assert nutrition['fat'] == 23.8
        assert nutrition['carbs'] == 30.0
    
    def test_extract_nutrition_with_validation(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è + –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        from utils.calorie_calculator import extract_nutrition_smart
        from utils.nutrition_validator import validate_nutrition_data
        from tests.mock_gpt import MockGPTResponses
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        response = MockGPTResponses.PHOTO_RESPONSES["–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π_–æ—Ç–≤–µ—Ç"]
        nutrition = extract_nutrition_smart(response)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–≤–ª–µ–∫–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        assert nutrition['calories'] == 159
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º
        validated = validate_nutrition_data(nutrition, "–¢–≤–æ—Ä–æ–≥ —Å –±–∞–Ω–∞–Ω–æ–º")
        
        # –ö–∞–ª–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã
        assert validated['calories'] > 400
    
    def test_async_photo_analysis_mock(self):
        """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ —Å –º–æ–∫–æ–º"""
        async def run_test():
            with patch('utils.photo_processor.ask_gpt', side_effect=mock_ask_gpt):
                from utils.photo_processor import analyze_food_photo
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ñ–µ–π–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                result = await analyze_food_photo("fake_base64_image_data")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                assert 'description' in result
                assert 'calories' in result
                assert result['success'] is True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
        try:
            loop = asyncio.get_event_loop()
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
        
        loop.run_until_complete(run_test())


class TestBJUExtractionMocked:
    """–¢–µ—Å—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ë–ñ–£ —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    
    def test_various_format_extraction(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤"""
        from utils.calorie_calculator import extract_nutrition_smart
        from tests.mock_gpt import MockGPTResponses
        
        test_cases = [
            (MockGPTResponses.PHOTO_RESPONSES["—Ç–≤–æ—Ä–æ–≥_–±–∞–Ω–∞–Ω"], 450, 30.5),
            (MockGPTResponses.PHOTO_RESPONSES["–æ–º–ª–µ—Ç"], 325, 19.5),
            (MockGPTResponses.PHOTO_RESPONSES["—Å–∞–ª–∞—Ç_–∫—É—Ä–∏—Ü–∞"], 317, 32.8),
            (MockGPTResponses.TEXT_RESPONSES["–≥—Ä–µ—á–∫–∞ –∫–æ—Ç–ª–µ—Ç–∞"], 480, 35.0),
        ]
        
        for response, expected_cal, expected_protein in test_cases:
            nutrition = extract_nutrition_smart(response)
            assert nutrition['calories'] == expected_cal
            assert nutrition['protein'] == expected_protein
    
    def test_mock_gpt_text_responses(self):
        """–¢–µ—Å—Ç –º–æ–∫-–æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–∫ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
        response = mock_ask_gpt([{"content": "–°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –≤ –≥—Ä–µ—á–∫–µ —Å –∫–æ—Ç–ª–µ—Ç–æ–π?"}])
        assert "480 –∫–∫–∞–ª" in response
        assert "35 –≥ –±–µ–ª–∫–∞" in response
        
        response = mock_ask_gpt([{"content": "–ê–Ω–∞–ª–∏–∑ –±–æ—Ä—â–∞"}])
        assert "350 –∫–∫–∞–ª" in response
        assert "25 –≥ –±–µ–ª–∫–∞" in response


def run_photo_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Ñ–æ—Ç–æ–∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑ pytest"""
    test_photo = TestPhotoAnalysis()
    test_processor = TestPhotoProcessorIntegration()
    test_bju = TestBJUExtractionMocked()
    
    tests = [
        (test_photo.test_photo_analysis_success, "–£—Å–ø–µ—à–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ"),
        (test_photo.test_photo_analysis_error, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"),
        (test_photo.test_photo_analysis_question, "–£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã"),
        (test_processor.test_extract_nutrition_from_response, "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞"),
        (test_processor.test_extract_nutrition_with_validation, "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ + –≤–∞–ª–∏–¥–∞—Ü–∏—è"),
        (test_processor.test_async_photo_analysis_mock, "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"),
        (test_bju.test_various_format_extraction, "–†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"),
        (test_bju.test_mock_gpt_text_responses, "–ú–æ–∫-–æ—Ç–≤–µ—Ç—ã GPT"),
    ]
    
    passed = 0
    failed = 0
    
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (—Å –º–æ–∫–∞–º–∏):\n")
    
    for test_func, test_name in tests:
        try:
            test_func()
            print(f"‚úÖ {test_name}")
            passed += 1
        except Exception as e:
            print(f"‚ùå {test_name}: {e}")
            failed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed} –ø—Ä–æ—à–ª–∏, {failed} —É–ø–∞–ª–∏")
    return failed == 0


if __name__ == "__main__":
    if pytest:
        pytest.main([__file__, "-v"])
    else:
        success = run_photo_tests()
        sys.exit(0 if success else 1)
