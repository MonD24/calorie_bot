#!/bin/bash

# –ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ–≥–æ –±–æ—Ç–∞
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./setup_and_run.sh

# –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ü–æ–≤ —Å—Ç—Ä–æ–∫ Windows -> Linux
fix_line_endings() {
    local script_path="$0"
    local temp_file="/tmp/$(basename "$script_path").tmp"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Windows line endings
    if command -v file >/dev/null && file "$script_path" | grep -q "CRLF"; then
        echo "üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã Windows line endings, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º..."
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ sed
        if sed 's/\r$//' "$script_path" > "$temp_file" 2>/dev/null; then
            mv "$temp_file" "$script_path"
            chmod +x "$script_path"
            echo "‚úÖ Line endings –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç..."
            exec "$script_path" "$@"
        else
            # Fallback - —á–µ—Ä–µ–∑ tr
            tr -d '\r' < "$script_path" > "$temp_file" 2>/dev/null && \
            mv "$temp_file" "$script_path" && \
            chmod +x "$script_path" && \
            echo "‚úÖ Line endings –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã (tr), –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç..." && \
            exec "$script_path" "$@"
        fi
    fi
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ .sh —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for sh_file in *.sh; do
        if [[ -f "$sh_file" && "$sh_file" != "$(basename "$script_path")" ]]; then
            if command -v file >/dev/null && file "$sh_file" | grep -q "CRLF"; then
                echo "üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º $sh_file..."
                sed -i 's/\r$//' "$sh_file" 2>/dev/null || tr -d '\r' < "$sh_file" > "${sh_file}.tmp" && mv "${sh_file}.tmp" "$sh_file"
                chmod +x "$sh_file"
            fi
        fi
    done
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
fix_line_endings "$@"

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# ASCII –ª–æ–≥–æ
echo -e "${CYAN}"
cat << "EOF"
  ____      _            _        ____        _   
 / ___|__ _| | ___  _ __(_) ___  | __ )  ___ | |_ 
| |   / _` | |/ _ \| '__| |/ _ \ |  _ \ / _ \| __|
| |__| (_| | | (_) | |  | |  __/ | |_) | (_) | |_ 
 \____\__,_|_|\___/|_|  |_|\___| |____/ \___/ \__|
                                                  
EOF
echo -e "${NC}"

echo -e "${GREEN}üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–∞–ª–æ—Ä–∏–π–Ω–æ–≥–æ Telegram –±–æ—Ç–∞${NC}"
echo

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VENV_DIR="$PROJECT_DIR/venv"
LOG_FILE="$PROJECT_DIR/bot.log"
PID_FILE="$PROJECT_DIR/bot.pid"

log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}" >&2
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

success() {
    echo -e "${GREEN}[SUCCESS] $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
stop_bot() {
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ PID —Ñ–∞–π–ª—É
    if [[ -f "$PID_FILE" ]]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ (PID: $pid)..."
            kill "$pid"
            sleep 2
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
            if kill -0 "$pid" 2>/dev/null; then
                kill -9 "$pid" 2>/dev/null || true
            fi
        fi
        rm -f "$PID_FILE"
    fi
    
    # –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python —Å calorie_bot
    pkill -f "python.*calorie_bot" 2>/dev/null || true
    pkill -f "calorie_bot_modular.py" 2>/dev/null || true
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    sleep 1
    local remaining_pids=$(pgrep -f "calorie_bot" 2>/dev/null || true)
    if [[ -n "$remaining_pids" ]]; then
        log "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ—Ü–µ—Å—Å—ã..."
        echo "$remaining_pids" | xargs -r kill -9 2>/dev/null || true
    fi
    
    log "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
check_system() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    if ! command -v python3 &> /dev/null; then
        error "Python 3 –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3:"
        info "  sudo apt update && sudo apt install -y python3 python3-pip python3-venv"
        exit 1
    fi
    
    PYTHON_VERSION=$(python3 --version 2>&1 | awk '{print $2}')
    if python3 -c "import sys; exit(0 if sys.version_info >= (3, 8) else 1)"; then
        success "Python $PYTHON_VERSION - OK"
    else
        error "–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+, –Ω–∞–π–¥–µ–Ω: $PYTHON_VERSION"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º pip
    if ! python3 -m pip --version &>/dev/null; then
        error "pip –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pip: sudo apt install -y python3-pip"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º venv
    if ! python3 -m venv --help &>/dev/null; then
        error "python3-venv –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ venv: sudo apt install -y python3-venv"
        exit 1
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_venv() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if [[ -d "$VENV_DIR" ]]; then
        warning "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º..."
        rm -rf "$VENV_DIR"
    fi
    
    python3 -m venv "$VENV_DIR"
    source "$VENV_DIR/bin/activate"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    pip install --upgrade pip
    
    success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    source "$VENV_DIR/bin/activate"
    
    if [[ -f "$PROJECT_DIR/requirements.txt" ]]; then
        pip install -r "$PROJECT_DIR/requirements.txt"
    else
        warning "requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
        pip install python-telegram-bot[job-queue] openai aiohttp python-dotenv
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º OpenAI API
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API..."
    if python3 check_openai.py; then
        success "OpenAI API –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        warning "–ü—Ä–æ–±–ª–µ–º—ã —Å OpenAI API, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
    fi
    
    success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
setup_config() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    # –°–æ–∑–¥–∞–µ–º .env –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if [[ ! -f "$PROJECT_DIR/.env" ]] && [[ -f "$PROJECT_DIR/.env.example" ]]; then
        cp "$PROJECT_DIR/.env.example" "$PROJECT_DIR/.env"
        warning "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env –∏–∑ –ø—Ä–∏–º–µ—Ä–∞"
        warning "‚ö†Ô∏è  –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏!"
    fi
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    mkdir -p "$PROJECT_DIR/bot_data" "$PROJECT_DIR/logs"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    cd "$PROJECT_DIR"
    source "$VENV_DIR/bin/activate"
    
    if python3 -c "
import sys
sys.path.insert(0, '$PROJECT_DIR')
try:
    from config import TELEGRAM_BOT_TOKEN, OPENAI_API_KEY
    if TELEGRAM_BOT_TOKEN and OPENAI_API_KEY:
        if len(TELEGRAM_BOT_TOKEN) > 10 and len(OPENAI_API_KEY) > 10:
            print('OK')
        else:
            print('ERROR: –ö–æ—Ä–æ—Ç–∫–∏–µ —Ç–æ–∫–µ–Ω—ã')
            sys.exit(1)
    else:
        print('ERROR: –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
        sys.exit(1)
except Exception as e:
    print(f'ERROR: {e}')
    sys.exit(1)
" 2>/dev/null; then
        success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
    else
        warning "–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"
        warning "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ .env –∏–ª–∏ config.py"
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤
test_imports() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤..."
    
    cd "$PROJECT_DIR"
    source "$VENV_DIR/bin/activate"
    export PYTHONPATH="$PROJECT_DIR:$PYTHONPATH"
    
    if python3 test_imports.py 2>/dev/null | grep -q "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"; then
        success "–ò–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        warning "–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏, –Ω–æ –ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å..."
    fi
}

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ nohup
start_bot() {
    log "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ..."
    
    cd "$PROJECT_DIR"
    source "$VENV_DIR/bin/activate"
    export PYTHONPATH="$PROJECT_DIR:$PYTHONPATH"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ nohup
    nohup python3 calorie_bot_modular.py > "$LOG_FILE" 2>&1 &
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID
    echo $! > "$PID_FILE"
    
    local pid=$(cat "$PID_FILE")
    success "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ (PID: $pid)"
    info "–õ–æ–≥–∏: $LOG_FILE"
    info "PID —Ñ–∞–π–ª: $PID_FILE"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    if [[ -f "$PID_FILE" ]]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            success "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (PID: $pid)"
            return 0
        else
            warning "PID —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            rm -f "$PID_FILE"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    if pgrep -f "python.*main.py" >/dev/null; then
        local pid=$(pgrep -f "python.*main.py")
        warning "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ PID —Ñ–∞–π–ª–∞ (PID: $pid)"
        echo "$pid" > "$PID_FILE"
        return 0
    fi
    
    error "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    return 1
}

# –ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤
show_logs() {
    if [[ -f "$LOG_FILE" ]]; then
        echo -e "${BLUE}–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:${NC}"
        tail -n 20 "$LOG_FILE"
        echo
        info "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏: tail -f $LOG_FILE"
    else
        warning "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $LOG_FILE"
    fi
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
run_interactive() {
    log "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ..."
    
    cd "$PROJECT_DIR"
    source "$VENV_DIR/bin/activate"
    export PYTHONPATH="$PROJECT_DIR:$PYTHONPATH"
    
    info "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C"
    python3 calorie_bot_modular.py
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${1:-install}" in
        "install"|"")
            log "üîß –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫..."
            stop_bot
            check_system
            setup_venv
            install_dependencies
            setup_config
            test_imports
            start_bot
            sleep 3
            check_status
            echo
            echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
            echo -e "${CYAN}‚ïë                    üéâ –ë–û–¢ –£–°–¢–ê–ù–û–í–õ–ï–ù –ò –ó–ê–ü–£–©–ï–ù!              ‚ïë${NC}"
            echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
            ;;
        "start")
            log "üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
            start_bot
            sleep 2
            check_status
            ;;
        "stop")
            log "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞..."
            stop_bot
            ;;
        "restart")
            log "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
            stop_bot
            sleep 2
            start_bot
            sleep 2
            check_status
            ;;
        "status")
            log "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞..."
            check_status
            ;;
        "logs")
            show_logs
            ;;
        "run"|"interactive")
            run_interactive
            ;;
        "update")
            log "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
            source "$VENV_DIR/bin/activate"
            pip install --upgrade pip
            if [[ -f requirements.txt ]]; then
                pip install -r requirements.txt --upgrade
            fi
            log "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."
            stop_bot
            sleep 2
            start_bot
            ;;
        "fix-openai")
            log "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ OpenAI API..."
            chmod +x fix_openai.sh
            ./fix_openai.sh
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {install|start|stop|restart|status|logs|run|interactive|update|fix-openai}"
            echo
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  install      - –ø–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            echo "  start        - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ"
            echo "  run          - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ"
            echo "  interactive  - —Ç–æ –∂–µ —á—Ç–æ –∏ run"
            echo "  stop         - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"
            echo "  restart      - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
            echo "  status       - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
            echo "  logs         - –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
            echo "  update       - –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"
            echo "  fix-openai   - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å OpenAI API"
            exit 1
            ;;
    esac
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'echo; log "–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"; exit 130' INT TERM

# –ó–∞–ø—É—Å–∫
main "$@"
