name: üß™ Automated Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: üì¶ Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: üîß Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
        
    - name: üè∑Ô∏è Set test environment
      run: |
        echo "TESTING_MODE=true" >> $GITHUB_ENV
        echo "SKIP_REAL_GPT=true" >> $GITHUB_ENV

    - name: üß™ Run CI Tests (Fast & Reliable)
      run: |
        python tests/test_ci.py

    - name: üß™ Run BJU extraction tests (if time permits)
      run: |
        if [ -f "test_bju_extraction.py" ]; then
          python test_bju_extraction.py || echo "‚ö†Ô∏è BJU test failed"
        else
          echo "‚ö†Ô∏è BJU test file not found - OK for CI"
        fi

    - name: üß™ Test mock responses
      run: |
        python tests/mock_gpt.py || echo "‚ö†Ô∏è Mock test skipped"

    - name: üîç Run syntax check
      run: |
        python -m py_compile calorie_bot_modular.py
        python -m py_compile utils/*.py
        python -m py_compile handlers/*.py
        python -m py_compile data/*.py

    - name: üìä Check code quality with flake8
      run: |
        pip install flake8
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è Telegram –±–æ—Ç–æ–≤
        flake8 --max-line-length=120 --ignore=E501,W503,E203 \
          calorie_bot_modular.py utils/ handlers/ data/ \
          --exclude=__pycache__,*.pyc

  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: üîí Security check with bandit
      run: |
        pip install bandit[toml]
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium || true

    - name: üïµÔ∏è Check for secrets
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        if grep -r "sk-" . --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml"; then
          echo "‚ùå –ù–∞–π–¥–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω—ã–µ API –∫–ª—é—á–∏ –≤ –∫–æ–¥–µ!"
          exit 1
        fi
        if grep -r "bot[0-9]" . --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml"; then
          echo "‚ùå –ù–∞–π–¥–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω—ã–µ bot tokens –≤ –∫–æ–¥–µ!"
          exit 1
        fi
        echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–µ–∫—Ä–µ—Ç—ã –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: üîß Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: üß™ Test import integrity
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è
        python -c "from utils.calorie_calculator import extract_nutrition_smart; print('‚úÖ calorie_calculator OK')"
        python -c "from utils.photo_processor import analyze_food_photo; print('‚úÖ photo_processor OK')"
        python -c "from utils.nutrition_validator import validate_nutrition_data; print('‚úÖ nutrition_validator OK')"
        python -c "from handlers.commands import help_command; print('‚úÖ commands OK')"
        python -c "from data.calorie_database import CALORIE_DATABASE; print('‚úÖ database OK')"

    - name: üèÉ‚Äç‚ôÇÔ∏è Test bot startup (dry run)
      run: |
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
        timeout 10s python calorie_bot_modular.py || true
        echo "‚úÖ Bot startup test completed"
