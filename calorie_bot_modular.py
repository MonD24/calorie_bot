#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∫–∞–ª–æ—Ä–∏–π–Ω–æ–≥–æ –±–æ—Ç–∞ - calorie_bot_modular.py
"""
import logging
import os
import sys
import datetime
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from telegram.ext import JobQueue

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã OpenAI
import openai_safe

from config import TELEGRAM_BOT_TOKEN, SCHEDULE
from handlers.commands import (
    start_command, help_command, goal_command, 
    weight_command, burn_command, left_command,
    clear_today_command, reset_command, limit_command, food_log_command,
    macros_command, evening_summary_function, morning_weight_function
)
from handlers.text_handler import handle_text_message
from handlers.photo_handler import handle_photo_message
from handlers.callback_handler import handle_callback_query

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


async def send_morning_weight_message(context):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤–µ—Å–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    from utils.user_data import get_all_users
    
    try:
        user_ids = get_all_users()
        for user_id in user_ids:
            try:
                await morning_weight_function(context, user_id)
            except Exception as e:
                logger.error(f"Failed to send morning message to {user_id}: {e}")
    except Exception as e:
        logger.error(f"Error in send_morning_weight_message: {e}")


async def send_evening_summary_message(context):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ–±–∑–æ—Ä–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    from utils.user_data import get_all_users
    
    try:
        user_ids = get_all_users()
        for user_id in user_ids:
            try:
                await evening_summary_function(context, user_id)
            except Exception as e:
                logger.error(f"Failed to send evening summary to {user_id}: {e}")
    except Exception as e:
        logger.error(f"Error in send_evening_summary_message: {e}")


def setup_scheduled_jobs(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π"""
    job_queue = application.job_queue
    
    # –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–µ—Å–µ
    morning_time = datetime.time(
        hour=SCHEDULE['morning_weight']['hour'],
        minute=SCHEDULE['morning_weight']['minute']
    )
    job_queue.run_daily(
        send_morning_weight_message,
        time=morning_time,
        name='morning_weight'
    )
    
    # –í–µ—á–µ—Ä–Ω–∏–π –æ–±–∑–æ—Ä –¥–Ω—è
    evening_time = datetime.time(
        hour=SCHEDULE['evening_summary']['hour'],
        minute=SCHEDULE['evening_summary']['minute']
    )
    job_queue.run_daily(
        send_evening_summary_message,
        time=evening_time,
        name='evening_summary'
    )
    
    logger.info(f"üìÖ Scheduled jobs set up: morning {morning_time}, evening {evening_time}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("goal", goal_command))
        application.add_handler(CommandHandler("weight", weight_command))
        application.add_handler(CommandHandler("burn", burn_command))
        application.add_handler(CommandHandler("left", left_command))
        application.add_handler(CommandHandler("clear", clear_today_command))
        application.add_handler(CommandHandler("reset", reset_command))
        application.add_handler(CommandHandler("limit", limit_command))
        application.add_handler(CommandHandler("food", food_log_command))
        application.add_handler(CommandHandler("macros", macros_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.PHOTO, handle_photo_message))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        application.add_handler(CallbackQueryHandler(handle_callback_query))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
        setup_scheduled_jobs(application)
        
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("üöÄ –ö–∞–ª–æ—Ä–∏–π–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üì± –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:")
        print(f"   üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–ø—Ä–æ—Å –≤–µ—Å–∞: {SCHEDULE['morning_weight']['hour']:02d}:{SCHEDULE['morning_weight']['minute']:02d} UTC")
        print(f"   üåô –í–µ—á–µ—Ä–Ω–∏–π –æ–±–∑–æ—Ä –¥–Ω—è: {SCHEDULE['evening_summary']['hour']:02d}:{SCHEDULE['evening_summary']['minute']:02d} UTC")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        sys.exit(1)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
