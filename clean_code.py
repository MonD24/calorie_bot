#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–æ–¥–∞ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
"""

import os
import re
from pathlib import Path

def clean_file(file_path):
    """–û—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –£–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ —Å—Ç—Ä–æ–∫–∞—Ö
        lines = content.split('\n')
        cleaned_lines = [line.rstrip() for line in lines]
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞
        while cleaned_lines and not cleaned_lines[-1].strip():
            cleaned_lines.pop()
        
        cleaned_content = '\n'.join(cleaned_lines) + '\n'
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if content != cleaned_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(cleaned_content)
            print(f"–û—á–∏—â–µ–Ω: {file_path}")
            return True
        
        return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
        return False

def clean_python_files():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
    project_root = Path(__file__).parent
    
    # –ü–∞–ø–∫–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    folders = ['utils', 'handlers', 'data']
    
    cleaned_count = 0
    for folder in folders:
        folder_path = project_root / folder
        if folder_path.exists():
            for py_file in folder_path.glob('*.py'):
                if clean_file(py_file):
                    cleaned_count += 1
    
    print(f"\n–û—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleaned_count}")
    return cleaned_count

if __name__ == "__main__":
    print("üßπ –û–ß–ò–°–¢–ö–ê –ö–û–î–ê –û–¢ –õ–ò–®–ù–ò–• –ü–†–û–ë–ï–õ–û–í")
    print("=" * 40)
    
    cleaned = clean_python_files()
    
    if cleaned > 0:
        print("‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!")
    else:
        print("‚ÑπÔ∏è –ö–æ–¥ —É–∂–µ –±—ã–ª —á–∏—Å—Ç—ã–º")
